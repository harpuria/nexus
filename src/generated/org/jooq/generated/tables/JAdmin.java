/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JNexus;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JGame.GamePath;
import org.jooq.generated.tables.JOrganization.OrganizationPath;
import org.jooq.generated.tables.records.AdminRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JAdmin extends TableImpl<AdminRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nexus.ADMIN</code>
     */
    public static final JAdmin ADMIN = new JAdmin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminRecord> getRecordType() {
        return AdminRecord.class;
    }

    /**
     * The column <code>nexus.ADMIN.ADMIN_ID</code>. ADMIN 테이블 기본키 (PK)
     */
    public final TableField<AdminRecord, Integer> ADMIN_ID = createField(DSL.name("ADMIN_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('nexus.\"ADMIN_ADMIN_ID_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "ADMIN 테이블 기본키 (PK)");

    /**
     * The column <code>nexus.ADMIN.ORG_ID</code>. 관리자 소속 (FK)
     */
    public final TableField<AdminRecord, Integer> ORG_ID = createField(DSL.name("ORG_ID"), SQLDataType.INTEGER.nullable(false), this, "관리자 소속 (FK)");

    /**
     * The column <code>nexus.ADMIN.GAME_ID</code>. 담당 게임 ID (FK, 총괄의 경우는 NULL)
     */
    public final TableField<AdminRecord, Integer> GAME_ID = createField(DSL.name("GAME_ID"), SQLDataType.INTEGER, this, "담당 게임 ID (FK, 총괄의 경우는 NULL)");

    /**
     * The column <code>nexus.ADMIN.LOGIN_ID</code>. 관리자 로그인 아이디
     */
    public final TableField<AdminRecord, String> LOGIN_ID = createField(DSL.name("LOGIN_ID"), SQLDataType.VARCHAR(64).nullable(false), this, "관리자 로그인 아이디");

    /**
     * The column <code>nexus.ADMIN.LOGIN_PW</code>. 관리자 로그인 비밀번호 (암호화 관리)
     */
    public final TableField<AdminRecord, String> LOGIN_PW = createField(DSL.name("LOGIN_PW"), SQLDataType.VARCHAR(64).nullable(false), this, "관리자 로그인 비밀번호 (암호화 관리)");

    /**
     * The column <code>nexus.ADMIN.ADMIN_ROLE</code>. 관리자 권한
     */
    public final TableField<AdminRecord, String> ADMIN_ROLE = createField(DSL.name("ADMIN_ROLE"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'NO_ROLE'::character varying"), SQLDataType.VARCHAR)), this, "관리자 권한");

    /**
     * The column <code>nexus.ADMIN.ADMIN_EMAIL</code>. 관리자 이메일
     */
    public final TableField<AdminRecord, String> ADMIN_EMAIL = createField(DSL.name("ADMIN_EMAIL"), SQLDataType.VARCHAR(255).nullable(false), this, "관리자 이메일");

    /**
     * The column <code>nexus.ADMIN.ADMIN_NM</code>. 관리자 이름
     */
    public final TableField<AdminRecord, String> ADMIN_NM = createField(DSL.name("ADMIN_NM"), SQLDataType.VARCHAR(32).nullable(false), this, "관리자 이름");

    /**
     * The column <code>nexus.ADMIN.CREATED_AT</code>. 데이터 생성 날짜
     */
    public final TableField<AdminRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 생성 날짜");

    /**
     * The column <code>nexus.ADMIN.CREATED_BY</code>. 데이터 생성자 ID
     */
    public final TableField<AdminRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 생성자 ID");

    /**
     * The column <code>nexus.ADMIN.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public final TableField<AdminRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 수정 날짜");

    /**
     * The column <code>nexus.ADMIN.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public final TableField<AdminRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 수정자 ID");

    /**
     * The column <code>nexus.ADMIN.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public final TableField<AdminRecord, String> IS_DEL = createField(DSL.name("IS_DEL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "데이터 삭제 여부 (기본값 N)");

    private JAdmin(Name alias, Table<AdminRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JAdmin(Name alias, Table<AdminRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>nexus.ADMIN</code> table reference
     */
    public JAdmin(String alias) {
        this(DSL.name(alias), ADMIN);
    }

    /**
     * Create an aliased <code>nexus.ADMIN</code> table reference
     */
    public JAdmin(Name alias) {
        this(alias, ADMIN);
    }

    /**
     * Create a <code>nexus.ADMIN</code> table reference
     */
    public JAdmin() {
        this(DSL.name("ADMIN"), null);
    }

    public <O extends Record> JAdmin(Table<O> path, ForeignKey<O, AdminRecord> childPath, InverseForeignKey<O, AdminRecord> parentPath) {
        super(path, childPath, parentPath, ADMIN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AdminPath extends JAdmin implements Path<AdminRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AdminPath(Table<O> path, ForeignKey<O, AdminRecord> childPath, InverseForeignKey<O, AdminRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AdminPath(Name alias, Table<AdminRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AdminPath as(String alias) {
            return new AdminPath(DSL.name(alias), this);
        }

        @Override
        public AdminPath as(Name alias) {
            return new AdminPath(alias, this);
        }

        @Override
        public AdminPath as(Table<?> alias) {
            return new AdminPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JNexus.NEXUS;
    }

    @Override
    public UniqueKey<AdminRecord> getPrimaryKey() {
        return Keys.ADMIN_PKEY;
    }

    @Override
    public List<UniqueKey<AdminRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ADMIN_ADMIN_EMAIL_UNIQUE, Keys.ADMIN_LOGIN_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<AdminRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ADMIN__ADMIN_GAME_ID_FOREIGN, Keys.ADMIN__ADMIN_ORG_ID_FOREIGN);
    }

    private transient GamePath _game;

    /**
     * Get the implicit join path to the <code>nexus.GAME</code> table.
     */
    public GamePath game() {
        if (_game == null)
            _game = new GamePath(this, Keys.ADMIN__ADMIN_GAME_ID_FOREIGN, null);

        return _game;
    }

    private transient OrganizationPath _organization;

    /**
     * Get the implicit join path to the <code>nexus.ORGANIZATION</code> table.
     */
    public OrganizationPath organization() {
        if (_organization == null)
            _organization = new OrganizationPath(this, Keys.ADMIN__ADMIN_ORG_ID_FOREIGN, null);

        return _organization;
    }

    @Override
    public List<Check<AdminRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("ADMIN_ADMIN_ROLE_check"), "(((\"ADMIN_ROLE\")::text = ANY ((ARRAY['NEXUS'::character varying, 'SUPER'::character varying, 'ADMIN'::character varying, 'OPERATOR'::character varying, 'NO_ROLE'::character varying])::text[])))", true)
        );
    }

    @Override
    public JAdmin as(String alias) {
        return new JAdmin(DSL.name(alias), this);
    }

    @Override
    public JAdmin as(Name alias) {
        return new JAdmin(alias, this);
    }

    @Override
    public JAdmin as(Table<?> alias) {
        return new JAdmin(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JAdmin rename(String name) {
        return new JAdmin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAdmin rename(Name name) {
        return new JAdmin(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAdmin rename(Table<?> name) {
        return new JAdmin(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAdmin where(Condition condition) {
        return new JAdmin(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAdmin where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAdmin where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAdmin where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAdmin where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAdmin where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAdmin where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAdmin where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAdmin whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAdmin whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
