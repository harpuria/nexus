/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.generated.JNexus;
import org.jooq.generated.tables.records.BaseRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JBase extends TableImpl<BaseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nexus.BASE</code>
     */
    public static final JBase BASE = new JBase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BaseRecord> getRecordType() {
        return BaseRecord.class;
    }

    /**
     * The column <code>nexus.BASE.CREATED_AT</code>. 데이터 생성 날짜
     */
    public final TableField<BaseRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 생성 날짜");

    /**
     * The column <code>nexus.BASE.CREATED_BY</code>. 데이터 생성자 ID
     */
    public final TableField<BaseRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 생성자 ID");

    /**
     * The column <code>nexus.BASE.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public final TableField<BaseRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 수정 날짜");

    /**
     * The column <code>nexus.BASE.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public final TableField<BaseRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 수정자 ID");

    /**
     * The column <code>nexus.BASE.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public final TableField<BaseRecord, String> IS_DEL = createField(DSL.name("IS_DEL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "데이터 삭제 여부 (기본값 N)");

    private JBase(Name alias, Table<BaseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JBase(Name alias, Table<BaseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>nexus.BASE</code> table reference
     */
    public JBase(String alias) {
        this(DSL.name(alias), BASE);
    }

    /**
     * Create an aliased <code>nexus.BASE</code> table reference
     */
    public JBase(Name alias) {
        this(alias, BASE);
    }

    /**
     * Create a <code>nexus.BASE</code> table reference
     */
    public JBase() {
        this(DSL.name("BASE"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JNexus.NEXUS;
    }

    @Override
    public JBase as(String alias) {
        return new JBase(DSL.name(alias), this);
    }

    @Override
    public JBase as(Name alias) {
        return new JBase(alias, this);
    }

    @Override
    public JBase as(Table<?> alias) {
        return new JBase(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JBase rename(String name) {
        return new JBase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JBase rename(Name name) {
        return new JBase(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JBase rename(Table<?> name) {
        return new JBase(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBase where(Condition condition) {
        return new JBase(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBase where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBase where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBase where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JBase where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JBase where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JBase where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JBase where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBase whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JBase whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
