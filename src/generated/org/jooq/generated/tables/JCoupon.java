/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JNexus;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JCouponUseLog.CouponUseLogPath;
import org.jooq.generated.tables.JGame.GamePath;
import org.jooq.generated.tables.records.CouponRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JCoupon extends TableImpl<CouponRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nexus.COUPON</code>
     */
    public static final JCoupon COUPON = new JCoupon();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CouponRecord> getRecordType() {
        return CouponRecord.class;
    }

    /**
     * The column <code>nexus.COUPON.COUPON_ID</code>. 쿠폰 아이디 (PK)
     */
    public final TableField<CouponRecord, Integer> COUPON_ID = createField(DSL.name("COUPON_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('\"COUPON_COUPON_ID_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "쿠폰 아이디 (PK)");

    /**
     * The column <code>nexus.COUPON.GAME_ID</code>. 게임 아이디 (FK)
     */
    public final TableField<CouponRecord, Integer> GAME_ID = createField(DSL.name("GAME_ID"), SQLDataType.INTEGER.nullable(false), this, "게임 아이디 (FK)");

    /**
     * The column <code>nexus.COUPON.NAME</code>. 쿠폰 이름
     */
    public final TableField<CouponRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "쿠폰 이름");

    /**
     * The column <code>nexus.COUPON.DESC</code>. 쿠폰 상세 설명
     */
    public final TableField<CouponRecord, Long> DESC = createField(DSL.name("DESC"), SQLDataType.BIGINT.nullable(false), this, "쿠폰 상세 설명");

    /**
     * The column <code>nexus.COUPON.CODE</code>. 쿠폰 코드
     */
    public final TableField<CouponRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255).nullable(false), this, "쿠폰 코드");

    /**
     * The column <code>nexus.COUPON.REWARDS</code>. 쿠폰 지급 재화
     */
    public final TableField<CouponRecord, JSONB> REWARDS = createField(DSL.name("REWARDS"), SQLDataType.JSONB.nullable(false), this, "쿠폰 지급 재화");

    /**
     * The column <code>nexus.COUPON.START_DATE</code>. 쿠폰 등록 시작 날짜
     */
    public final TableField<CouponRecord, OffsetDateTime> START_DATE = createField(DSL.name("START_DATE"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "쿠폰 등록 시작 날짜");

    /**
     * The column <code>nexus.COUPON.END_DATE</code>. 쿠폰 등록 종료 날짜
     */
    public final TableField<CouponRecord, OffsetDateTime> END_DATE = createField(DSL.name("END_DATE"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "쿠폰 등록 종료 날짜");

    /**
     * The column <code>nexus.COUPON.MAX_ISSUE_COUNT</code>. 쿠폰 발행량 (0 이면 무제한)
     */
    public final TableField<CouponRecord, Long> MAX_ISSUE_COUNT = createField(DSL.name("MAX_ISSUE_COUNT"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'0'::bigint"), SQLDataType.BIGINT)), this, "쿠폰 발행량 (0 이면 무제한)");

    /**
     * The column <code>nexus.COUPON.USE_LIMIT_PER_USER</code>. 한 명의 유저가 사용할 수
     * 있는 쿠폰 개수
     */
    public final TableField<CouponRecord, Integer> USE_LIMIT_PER_USER = createField(DSL.name("USE_LIMIT_PER_USER"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "한 명의 유저가 사용할 수 있는 쿠폰 개수");

    /**
     * The column <code>nexus.COUPON.CREATED_AT</code>. 데이터 생성 날짜
     */
    public final TableField<CouponRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 생성 날짜");

    /**
     * The column <code>nexus.COUPON.CREATED_BY</code>. 데이터 생성자 ID
     */
    public final TableField<CouponRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 생성자 ID");

    /**
     * The column <code>nexus.COUPON.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public final TableField<CouponRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 수정 날짜");

    /**
     * The column <code>nexus.COUPON.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public final TableField<CouponRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 수정자 ID");

    /**
     * The column <code>nexus.COUPON.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public final TableField<CouponRecord, String> IS_DEL = createField(DSL.name("IS_DEL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "데이터 삭제 여부 (기본값 N)");

    private JCoupon(Name alias, Table<CouponRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JCoupon(Name alias, Table<CouponRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>nexus.COUPON</code> table reference
     */
    public JCoupon(String alias) {
        this(DSL.name(alias), COUPON);
    }

    /**
     * Create an aliased <code>nexus.COUPON</code> table reference
     */
    public JCoupon(Name alias) {
        this(alias, COUPON);
    }

    /**
     * Create a <code>nexus.COUPON</code> table reference
     */
    public JCoupon() {
        this(DSL.name("COUPON"), null);
    }

    public <O extends Record> JCoupon(Table<O> path, ForeignKey<O, CouponRecord> childPath, InverseForeignKey<O, CouponRecord> parentPath) {
        super(path, childPath, parentPath, COUPON);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CouponPath extends JCoupon implements Path<CouponRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CouponPath(Table<O> path, ForeignKey<O, CouponRecord> childPath, InverseForeignKey<O, CouponRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CouponPath(Name alias, Table<CouponRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CouponPath as(String alias) {
            return new CouponPath(DSL.name(alias), this);
        }

        @Override
        public CouponPath as(Name alias) {
            return new CouponPath(alias, this);
        }

        @Override
        public CouponPath as(Table<?> alias) {
            return new CouponPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JNexus.NEXUS;
    }

    @Override
    public UniqueKey<CouponRecord> getPrimaryKey() {
        return Keys.COUPON_PKEY;
    }

    @Override
    public List<ForeignKey<CouponRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COUPON__COUPON_GAME_ID_FOREIGN);
    }

    private transient GamePath _game;

    /**
     * Get the implicit join path to the <code>nexus.GAME</code> table.
     */
    public GamePath game() {
        if (_game == null)
            _game = new GamePath(this, Keys.COUPON__COUPON_GAME_ID_FOREIGN, null);

        return _game;
    }

    private transient CouponUseLogPath _couponUseLog;

    /**
     * Get the implicit to-many join path to the
     * <code>nexus.COUPON_USE_LOG</code> table
     */
    public CouponUseLogPath couponUseLog() {
        if (_couponUseLog == null)
            _couponUseLog = new CouponUseLogPath(this, null, Keys.COUPON_USE_LOG__COUPON_USE_LOG_COUPON_ID_FOREIGN.getInverseKey());

        return _couponUseLog;
    }

    @Override
    public JCoupon as(String alias) {
        return new JCoupon(DSL.name(alias), this);
    }

    @Override
    public JCoupon as(Name alias) {
        return new JCoupon(alias, this);
    }

    @Override
    public JCoupon as(Table<?> alias) {
        return new JCoupon(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCoupon rename(String name) {
        return new JCoupon(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCoupon rename(Name name) {
        return new JCoupon(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCoupon rename(Table<?> name) {
        return new JCoupon(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCoupon where(Condition condition) {
        return new JCoupon(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCoupon where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCoupon where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCoupon where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCoupon where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCoupon where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCoupon where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCoupon where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCoupon whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCoupon whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
