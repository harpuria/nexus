/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JNexus;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JAdmin.AdminPath;
import org.jooq.generated.tables.JCurrency.CurrencyPath;
import org.jooq.generated.tables.JGameCoupon.GameCouponPath;
import org.jooq.generated.tables.JGameTable.GameTablePath;
import org.jooq.generated.tables.JGameUser.GameUserPath;
import org.jooq.generated.tables.JOrganization.OrganizationPath;
import org.jooq.generated.tables.records.GameRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JGame extends TableImpl<GameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nexus.GAME</code>
     */
    public static final JGame GAME = new JGame();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameRecord> getRecordType() {
        return GameRecord.class;
    }

    /**
     * The column <code>nexus.GAME.GAME_ID</code>. GAME 테이블 기본키 (PK)
     */
    public final TableField<GameRecord, Integer> GAME_ID = createField(DSL.name("GAME_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('nexus.\"GAME_GAME_ID_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "GAME 테이블 기본키 (PK)");

    /**
     * The column <code>nexus.GAME.ORG_ID</code>. 게임 소속 (FK)
     */
    public final TableField<GameRecord, Integer> ORG_ID = createField(DSL.name("ORG_ID"), SQLDataType.INTEGER.nullable(false), this, "게임 소속 (FK)");

    /**
     * The column <code>nexus.GAME.NAME</code>. 게임 이름
     */
    public final TableField<GameRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "게임 이름");

    /**
     * The column <code>nexus.GAME.CLIENT_APP_ID</code>. 클라이언트 앱 아이디
     */
    public final TableField<GameRecord, UUID> CLIENT_APP_ID = createField(DSL.name("CLIENT_APP_ID"), SQLDataType.UUID.nullable(false), this, "클라이언트 앱 아이디");

    /**
     * The column <code>nexus.GAME.SIGNATURE_KEY</code>. 서명 키 (절대 노출 금지)
     */
    public final TableField<GameRecord, UUID> SIGNATURE_KEY = createField(DSL.name("SIGNATURE_KEY"), SQLDataType.UUID.nullable(false), this, "서명 키 (절대 노출 금지)");

    /**
     * The column <code>nexus.GAME.GOOGLE_CLIENT_ID</code>. 구글 로그인 클라이언트 키
     */
    public final TableField<GameRecord, String> GOOGLE_CLIENT_ID = createField(DSL.name("GOOGLE_CLIENT_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "구글 로그인 클라이언트 키");

    /**
     * The column <code>nexus.GAME.GOOGLE_CLIENT_SECRET</code>. 구글 로그인 클라이언트 보안
     * 키
     */
    public final TableField<GameRecord, String> GOOGLE_CLIENT_SECRET = createField(DSL.name("GOOGLE_CLIENT_SECRET"), SQLDataType.VARCHAR(255).nullable(false), this, "구글 로그인 클라이언트 보안 키");

    /**
     * The column <code>nexus.GAME.STATUS</code>. 게임 상태 값
     */
    public final TableField<GameRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'STOPPED'::character varying"), SQLDataType.VARCHAR)), this, "게임 상태 값");

    /**
     * The column <code>nexus.GAME.CREATED_AT</code>. 데이터 생성 날짜
     */
    public final TableField<GameRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 생성 날짜");

    /**
     * The column <code>nexus.GAME.CREATED_BY</code>. 데이터 생성자 ID
     */
    public final TableField<GameRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 생성자 ID");

    /**
     * The column <code>nexus.GAME.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public final TableField<GameRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 수정 날짜");

    /**
     * The column <code>nexus.GAME.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public final TableField<GameRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 수정자 ID");

    /**
     * The column <code>nexus.GAME.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public final TableField<GameRecord, String> IS_DEL = createField(DSL.name("IS_DEL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "데이터 삭제 여부 (기본값 N)");

    private JGame(Name alias, Table<GameRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JGame(Name alias, Table<GameRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>nexus.GAME</code> table reference
     */
    public JGame(String alias) {
        this(DSL.name(alias), GAME);
    }

    /**
     * Create an aliased <code>nexus.GAME</code> table reference
     */
    public JGame(Name alias) {
        this(alias, GAME);
    }

    /**
     * Create a <code>nexus.GAME</code> table reference
     */
    public JGame() {
        this(DSL.name("GAME"), null);
    }

    public <O extends Record> JGame(Table<O> path, ForeignKey<O, GameRecord> childPath, InverseForeignKey<O, GameRecord> parentPath) {
        super(path, childPath, parentPath, GAME);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GamePath extends JGame implements Path<GameRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GamePath(Table<O> path, ForeignKey<O, GameRecord> childPath, InverseForeignKey<O, GameRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GamePath(Name alias, Table<GameRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GamePath as(String alias) {
            return new GamePath(DSL.name(alias), this);
        }

        @Override
        public GamePath as(Name alias) {
            return new GamePath(alias, this);
        }

        @Override
        public GamePath as(Table<?> alias) {
            return new GamePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JNexus.NEXUS;
    }

    @Override
    public UniqueKey<GameRecord> getPrimaryKey() {
        return Keys.GAME_PKEY;
    }

    @Override
    public List<ForeignKey<GameRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GAME__GAME_ORG_ID_FOREIGN);
    }

    private transient OrganizationPath _organization;

    /**
     * Get the implicit join path to the <code>nexus.ORGANIZATION</code> table.
     */
    public OrganizationPath organization() {
        if (_organization == null)
            _organization = new OrganizationPath(this, Keys.GAME__GAME_ORG_ID_FOREIGN, null);

        return _organization;
    }

    private transient AdminPath _admin;

    /**
     * Get the implicit to-many join path to the <code>nexus.ADMIN</code> table
     */
    public AdminPath admin() {
        if (_admin == null)
            _admin = new AdminPath(this, null, Keys.ADMIN__ADMIN_GAME_ID_FOREIGN.getInverseKey());

        return _admin;
    }

    private transient CurrencyPath _currency;

    /**
     * Get the implicit to-many join path to the <code>nexus.CURRENCY</code>
     * table
     */
    public CurrencyPath currency() {
        if (_currency == null)
            _currency = new CurrencyPath(this, null, Keys.CURRENCY__CURRENCY_GAME_ID_FOREIGN.getInverseKey());

        return _currency;
    }

    private transient GameCouponPath _gameCoupon;

    /**
     * Get the implicit to-many join path to the <code>nexus.GAME_COUPON</code>
     * table
     */
    public GameCouponPath gameCoupon() {
        if (_gameCoupon == null)
            _gameCoupon = new GameCouponPath(this, null, Keys.GAME_COUPON__GAME_COUPON_GAME_ID_FOREIGN.getInverseKey());

        return _gameCoupon;
    }

    private transient GameTablePath _gameTable;

    /**
     * Get the implicit to-many join path to the <code>nexus.GAME_TABLE</code>
     * table
     */
    public GameTablePath gameTable() {
        if (_gameTable == null)
            _gameTable = new GameTablePath(this, null, Keys.GAME_TABLE__GAME_TABLE_GAME_ID_FOREIGN.getInverseKey());

        return _gameTable;
    }

    private transient GameUserPath _gameUser;

    /**
     * Get the implicit to-many join path to the <code>nexus.GAME_USER</code>
     * table
     */
    public GameUserPath gameUser() {
        if (_gameUser == null)
            _gameUser = new GameUserPath(this, null, Keys.GAME_USER__GAME_USER_GAME_ID_FOREIGN.getInverseKey());

        return _gameUser;
    }

    @Override
    public List<Check<GameRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("GAME_STATUS_check"), "(((\"STATUS\")::text = ANY ((ARRAY['OPERATING'::character varying, 'STOPPED'::character varying, 'MAINTENANCE'::character varying])::text[])))", true)
        );
    }

    @Override
    public JGame as(String alias) {
        return new JGame(DSL.name(alias), this);
    }

    @Override
    public JGame as(Name alias) {
        return new JGame(alias, this);
    }

    @Override
    public JGame as(Table<?> alias) {
        return new JGame(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JGame rename(String name) {
        return new JGame(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGame rename(Name name) {
        return new JGame(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGame rename(Table<?> name) {
        return new JGame(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGame where(Condition condition) {
        return new JGame(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGame where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGame where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGame where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGame where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGame where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGame where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGame where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGame whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGame whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
