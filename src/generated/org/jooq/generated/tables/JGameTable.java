/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JNexus;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JGame.GamePath;
import org.jooq.generated.tables.JTableColumn.TableColumnPath;
import org.jooq.generated.tables.records.GameTableRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JGameTable extends TableImpl<GameTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nexus.GAME_TABLE</code>
     */
    public static final JGameTable GAME_TABLE = new JGameTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameTableRecord> getRecordType() {
        return GameTableRecord.class;
    }

    /**
     * The column <code>nexus.GAME_TABLE.TABLE_ID</code>. GAME_TABLE 테이블 기본키(PK)
     */
    public final TableField<GameTableRecord, Integer> TABLE_ID = createField(DSL.name("TABLE_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('nexus.\"GAME_TABLE_TABLE_ID_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "GAME_TABLE 테이블 기본키(PK)");

    /**
     * The column <code>nexus.GAME_TABLE.GAME_ID</code>. 해당 테이블을 사용하는 게임 ID (FK)
     */
    public final TableField<GameTableRecord, Integer> GAME_ID = createField(DSL.name("GAME_ID"), SQLDataType.INTEGER.nullable(false), this, "해당 테이블을 사용하는 게임 ID (FK)");

    /**
     * The column <code>nexus.GAME_TABLE.NAME</code>. 테이블 이름
     */
    public final TableField<GameTableRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "테이블 이름");

    /**
     * The column <code>nexus.GAME_TABLE.DESCRIPTION</code>. 테이블 설명
     */
    public final TableField<GameTableRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(255).nullable(false), this, "테이블 설명");

    /**
     * The column <code>nexus.GAME_TABLE.CREATED_AT</code>. 데이터 생성 날짜
     */
    public final TableField<GameTableRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 생성 날짜");

    /**
     * The column <code>nexus.GAME_TABLE.CREATED_BY</code>. 데이터 생성자 ID
     */
    public final TableField<GameTableRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 생성자 ID");

    /**
     * The column <code>nexus.GAME_TABLE.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public final TableField<GameTableRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 수정 날짜");

    /**
     * The column <code>nexus.GAME_TABLE.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public final TableField<GameTableRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 수정자 ID");

    /**
     * The column <code>nexus.GAME_TABLE.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public final TableField<GameTableRecord, String> IS_DEL = createField(DSL.name("IS_DEL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "데이터 삭제 여부 (기본값 N)");

    private JGameTable(Name alias, Table<GameTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JGameTable(Name alias, Table<GameTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>nexus.GAME_TABLE</code> table reference
     */
    public JGameTable(String alias) {
        this(DSL.name(alias), GAME_TABLE);
    }

    /**
     * Create an aliased <code>nexus.GAME_TABLE</code> table reference
     */
    public JGameTable(Name alias) {
        this(alias, GAME_TABLE);
    }

    /**
     * Create a <code>nexus.GAME_TABLE</code> table reference
     */
    public JGameTable() {
        this(DSL.name("GAME_TABLE"), null);
    }

    public <O extends Record> JGameTable(Table<O> path, ForeignKey<O, GameTableRecord> childPath, InverseForeignKey<O, GameTableRecord> parentPath) {
        super(path, childPath, parentPath, GAME_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GameTablePath extends JGameTable implements Path<GameTableRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GameTablePath(Table<O> path, ForeignKey<O, GameTableRecord> childPath, InverseForeignKey<O, GameTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GameTablePath(Name alias, Table<GameTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GameTablePath as(String alias) {
            return new GameTablePath(DSL.name(alias), this);
        }

        @Override
        public GameTablePath as(Name alias) {
            return new GameTablePath(alias, this);
        }

        @Override
        public GameTablePath as(Table<?> alias) {
            return new GameTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JNexus.NEXUS;
    }

    @Override
    public UniqueKey<GameTableRecord> getPrimaryKey() {
        return Keys.GAME_TABLE_PKEY;
    }

    @Override
    public List<ForeignKey<GameTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GAME_TABLE__GAME_TABLE_GAME_ID_FOREIGN);
    }

    private transient GamePath _game;

    /**
     * Get the implicit join path to the <code>nexus.GAME</code> table.
     */
    public GamePath game() {
        if (_game == null)
            _game = new GamePath(this, Keys.GAME_TABLE__GAME_TABLE_GAME_ID_FOREIGN, null);

        return _game;
    }

    private transient TableColumnPath _tableColumn;

    /**
     * Get the implicit to-many join path to the <code>nexus.TABLE_COLUMN</code>
     * table
     */
    public TableColumnPath tableColumn() {
        if (_tableColumn == null)
            _tableColumn = new TableColumnPath(this, null, Keys.TABLE_COLUMN__TABLE_COLUMN_TABLE_ID_FOREIGN.getInverseKey());

        return _tableColumn;
    }

    @Override
    public JGameTable as(String alias) {
        return new JGameTable(DSL.name(alias), this);
    }

    @Override
    public JGameTable as(Name alias) {
        return new JGameTable(alias, this);
    }

    @Override
    public JGameTable as(Table<?> alias) {
        return new JGameTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JGameTable rename(String name) {
        return new JGameTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGameTable rename(Name name) {
        return new JGameTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGameTable rename(Table<?> name) {
        return new JGameTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGameTable where(Condition condition) {
        return new JGameTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGameTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGameTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGameTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGameTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGameTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGameTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGameTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGameTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGameTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
