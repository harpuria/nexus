/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JNexus;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JCouponUseLog.CouponUseLogPath;
import org.jooq.generated.tables.JGame.GamePath;
import org.jooq.generated.tables.JUserColumnData.UserColumnDataPath;
import org.jooq.generated.tables.JUserCurrency.UserCurrencyPath;
import org.jooq.generated.tables.JUserMail.UserMailPath;
import org.jooq.generated.tables.records.GameUserRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JGameUser extends TableImpl<GameUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nexus.GAME_USER</code>
     */
    public static final JGameUser GAME_USER = new JGameUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameUserRecord> getRecordType() {
        return GameUserRecord.class;
    }

    /**
     * The column <code>nexus.GAME_USER.USER_ID</code>. GAME_USER 테이블 기본키(PK)
     */
    public final TableField<GameUserRecord, Integer> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('nexus.\"GAME_USER_USER_ID_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "GAME_USER 테이블 기본키(PK)");

    /**
     * The column <code>nexus.GAME_USER.GAME_ID</code>. 해당 유저가 속한 게임 ID (FK)
     */
    public final TableField<GameUserRecord, Integer> GAME_ID = createField(DSL.name("GAME_ID"), SQLDataType.INTEGER.nullable(false), this, "해당 유저가 속한 게임 ID (FK)");

    /**
     * The column <code>nexus.GAME_USER.USER_L_ID</code>. 유저 로그인 아이디 (소셜 로그인이 아닌
     * 경우)
     */
    public final TableField<GameUserRecord, String> USER_L_ID = createField(DSL.name("USER_L_ID"), SQLDataType.VARCHAR(255), this, "유저 로그인 아이디 (소셜 로그인이 아닌 경우)");

    /**
     * The column <code>nexus.GAME_USER.USER_L_PW</code>. 유저 로그인 패스워드 (소셜 로그인이
     * 아닌 경우)
     */
    public final TableField<GameUserRecord, String> USER_L_PW = createField(DSL.name("USER_L_PW"), SQLDataType.VARCHAR(255), this, "유저 로그인 패스워드 (소셜 로그인이 아닌 경우)");

    /**
     * The column <code>nexus.GAME_USER.PROVIDER</code>. 소셜 로그인 타입
     */
    public final TableField<GameUserRecord, String> PROVIDER = createField(DSL.name("PROVIDER"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'ETC'::character varying"), SQLDataType.VARCHAR)), this, "소셜 로그인 타입");

    /**
     * The column <code>nexus.GAME_USER.SOCIAL_ID</code>. 소셜 로그인 아이디
     */
    public final TableField<GameUserRecord, String> SOCIAL_ID = createField(DSL.name("SOCIAL_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "소셜 로그인 아이디");

    /**
     * The column <code>nexus.GAME_USER.NICKNAME</code>. 게임에서 사용되는 닉네임
     */
    public final TableField<GameUserRecord, String> NICKNAME = createField(DSL.name("NICKNAME"), SQLDataType.VARCHAR(255).nullable(false), this, "게임에서 사용되는 닉네임");

    /**
     * The column <code>nexus.GAME_USER.DEVICE</code>. 접속 기기
     */
    public final TableField<GameUserRecord, String> DEVICE = createField(DSL.name("DEVICE"), SQLDataType.VARCHAR(255), this, "접속 기기");

    /**
     * The column <code>nexus.GAME_USER.BLOCK_START_DATE</code>. 계정 정지 시작일
     */
    public final TableField<GameUserRecord, OffsetDateTime> BLOCK_START_DATE = createField(DSL.name("BLOCK_START_DATE"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "계정 정지 시작일");

    /**
     * The column <code>nexus.GAME_USER.BLOCK_END_DATE</code>. 계정 정지 종료일
     */
    public final TableField<GameUserRecord, OffsetDateTime> BLOCK_END_DATE = createField(DSL.name("BLOCK_END_DATE"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "계정 정지 종료일");

    /**
     * The column <code>nexus.GAME_USER.BLOCK_REASON</code>. 계정 정지 사유
     */
    public final TableField<GameUserRecord, String> BLOCK_REASON = createField(DSL.name("BLOCK_REASON"), SQLDataType.VARCHAR(255), this, "계정 정지 사유");

    /**
     * The column <code>nexus.GAME_USER.IS_WITHDRAWAL</code>. 회원탈퇴여부
     */
    public final TableField<GameUserRecord, String> IS_WITHDRAWAL = createField(DSL.name("IS_WITHDRAWAL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "회원탈퇴여부");

    /**
     * The column <code>nexus.GAME_USER.WITHDRAWAL_DATE</code>. 게임탈퇴날짜
     */
    public final TableField<GameUserRecord, OffsetDateTime> WITHDRAWAL_DATE = createField(DSL.name("WITHDRAWAL_DATE"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "게임탈퇴날짜");

    /**
     * The column <code>nexus.GAME_USER.WITHDRAWAL_REASON</code>. 게임탈퇴사유
     */
    public final TableField<GameUserRecord, String> WITHDRAWAL_REASON = createField(DSL.name("WITHDRAWAL_REASON"), SQLDataType.VARCHAR(255), this, "게임탈퇴사유");

    /**
     * The column <code>nexus.GAME_USER.CREATED_AT</code>. 데이터 생성 날짜
     */
    public final TableField<GameUserRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 생성 날짜");

    /**
     * The column <code>nexus.GAME_USER.CREATED_BY</code>. 데이터 생성자 ID
     */
    public final TableField<GameUserRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 생성자 ID");

    /**
     * The column <code>nexus.GAME_USER.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public final TableField<GameUserRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 수정 날짜");

    /**
     * The column <code>nexus.GAME_USER.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public final TableField<GameUserRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 수정자 ID");

    /**
     * The column <code>nexus.GAME_USER.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public final TableField<GameUserRecord, String> IS_DEL = createField(DSL.name("IS_DEL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "데이터 삭제 여부 (기본값 N)");

    private JGameUser(Name alias, Table<GameUserRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JGameUser(Name alias, Table<GameUserRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>nexus.GAME_USER</code> table reference
     */
    public JGameUser(String alias) {
        this(DSL.name(alias), GAME_USER);
    }

    /**
     * Create an aliased <code>nexus.GAME_USER</code> table reference
     */
    public JGameUser(Name alias) {
        this(alias, GAME_USER);
    }

    /**
     * Create a <code>nexus.GAME_USER</code> table reference
     */
    public JGameUser() {
        this(DSL.name("GAME_USER"), null);
    }

    public <O extends Record> JGameUser(Table<O> path, ForeignKey<O, GameUserRecord> childPath, InverseForeignKey<O, GameUserRecord> parentPath) {
        super(path, childPath, parentPath, GAME_USER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GameUserPath extends JGameUser implements Path<GameUserRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GameUserPath(Table<O> path, ForeignKey<O, GameUserRecord> childPath, InverseForeignKey<O, GameUserRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GameUserPath(Name alias, Table<GameUserRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GameUserPath as(String alias) {
            return new GameUserPath(DSL.name(alias), this);
        }

        @Override
        public GameUserPath as(Name alias) {
            return new GameUserPath(alias, this);
        }

        @Override
        public GameUserPath as(Table<?> alias) {
            return new GameUserPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JNexus.NEXUS;
    }

    @Override
    public UniqueKey<GameUserRecord> getPrimaryKey() {
        return Keys.GAME_USER_PKEY;
    }

    @Override
    public List<ForeignKey<GameUserRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GAME_USER__GAME_USER_GAME_ID_FOREIGN);
    }

    private transient GamePath _game;

    /**
     * Get the implicit join path to the <code>nexus.GAME</code> table.
     */
    public GamePath game() {
        if (_game == null)
            _game = new GamePath(this, Keys.GAME_USER__GAME_USER_GAME_ID_FOREIGN, null);

        return _game;
    }

    private transient CouponUseLogPath _couponUseLog;

    /**
     * Get the implicit to-many join path to the
     * <code>nexus.COUPON_USE_LOG</code> table
     */
    public CouponUseLogPath couponUseLog() {
        if (_couponUseLog == null)
            _couponUseLog = new CouponUseLogPath(this, null, Keys.COUPON_USE_LOG__COUPON_USE_LOG_USER_ID_FOREIGN.getInverseKey());

        return _couponUseLog;
    }

    private transient UserColumnDataPath _userColumnData;

    /**
     * Get the implicit to-many join path to the
     * <code>nexus.USER_COLUMN_DATA</code> table
     */
    public UserColumnDataPath userColumnData() {
        if (_userColumnData == null)
            _userColumnData = new UserColumnDataPath(this, null, Keys.USER_COLUMN_DATA__USER_COLUMN_DATA_USER_ID_FOREIGN.getInverseKey());

        return _userColumnData;
    }

    private transient UserCurrencyPath _userCurrency;

    /**
     * Get the implicit to-many join path to the
     * <code>nexus.USER_CURRENCY</code> table
     */
    public UserCurrencyPath userCurrency() {
        if (_userCurrency == null)
            _userCurrency = new UserCurrencyPath(this, null, Keys.USER_CURRENCY__USER_CURRENCY_USER_ID_FOREIGN.getInverseKey());

        return _userCurrency;
    }

    private transient UserMailPath _userMail;

    /**
     * Get the implicit to-many join path to the <code>nexus.USER_MAIL</code>
     * table
     */
    public UserMailPath userMail() {
        if (_userMail == null)
            _userMail = new UserMailPath(this, null, Keys.USER_MAIL__USER_MAIL_USER_ID_FOREIGN.getInverseKey());

        return _userMail;
    }

    @Override
    public List<Check<GameUserRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("GAME_USER_PROVIDER_check"), "(((\"PROVIDER\")::text = ANY ((ARRAY['GOOGLE'::character varying, 'FACEBOOK'::character varying, 'APPLE'::character varying, 'X'::character varying, 'KAKAO'::character varying, 'NAVER'::character varying, 'GUEST'::character varying, 'ETC'::character varying])::text[])))", true)
        );
    }

    @Override
    public JGameUser as(String alias) {
        return new JGameUser(DSL.name(alias), this);
    }

    @Override
    public JGameUser as(Name alias) {
        return new JGameUser(alias, this);
    }

    @Override
    public JGameUser as(Table<?> alias) {
        return new JGameUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JGameUser rename(String name) {
        return new JGameUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGameUser rename(Name name) {
        return new JGameUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGameUser rename(Table<?> name) {
        return new JGameUser(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGameUser where(Condition condition) {
        return new JGameUser(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGameUser where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGameUser where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGameUser where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGameUser where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGameUser where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGameUser where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGameUser where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGameUser whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGameUser whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
