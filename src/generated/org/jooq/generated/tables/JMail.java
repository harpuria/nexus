/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JNexus;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JGame.GamePath;
import org.jooq.generated.tables.JUserMail.UserMailPath;
import org.jooq.generated.tables.records.MailRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JMail extends TableImpl<MailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nexus.MAIL</code>
     */
    public static final JMail MAIL = new JMail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MailRecord> getRecordType() {
        return MailRecord.class;
    }

    /**
     * The column <code>nexus.MAIL.MAIL_ID</code>. 우편 아이디 (PK)
     */
    public final TableField<MailRecord, Integer> MAIL_ID = createField(DSL.name("MAIL_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('nexus.\"MAIL_MAIL_ID_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "우편 아이디 (PK)");

    /**
     * The column <code>nexus.MAIL.GAME_ID</code>. 게임 아이디 (FK)
     */
    public final TableField<MailRecord, Integer> GAME_ID = createField(DSL.name("GAME_ID"), SQLDataType.INTEGER.nullable(false), this, "게임 아이디 (FK)");

    /**
     * The column <code>nexus.MAIL.TITLE</code>. 우편 제목
     */
    public final TableField<MailRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(255).nullable(false), this, "우편 제목");

    /**
     * The column <code>nexus.MAIL.CONTENT</code>. 우편 내용
     */
    public final TableField<MailRecord, String> CONTENT = createField(DSL.name("CONTENT"), SQLDataType.CLOB.nullable(false), this, "우편 내용");

    /**
     * The column <code>nexus.MAIL.REWARDS</code>. 우편 보상
     */
    public final TableField<MailRecord, JSONB> REWARDS = createField(DSL.name("REWARDS"), SQLDataType.JSONB, this, "우편 보상");

    /**
     * The column <code>nexus.MAIL.SEND_TYPE</code>. 발송 타입
     */
    public final TableField<MailRecord, String> SEND_TYPE = createField(DSL.name("SEND_TYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "발송 타입");

    /**
     * The column <code>nexus.MAIL.EXPIRE_AT</code>. 우편 유효 기간 (보상)
     */
    public final TableField<MailRecord, Long> EXPIRE_AT = createField(DSL.name("EXPIRE_AT"), SQLDataType.BIGINT, this, "우편 유효 기간 (보상)");

    /**
     * The column <code>nexus.MAIL.CREATED_AT</code>. 데이터 생성 날짜
     */
    public final TableField<MailRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 생성 날짜");

    /**
     * The column <code>nexus.MAIL.CREATED_BY</code>. 데이터 생성자 ID
     */
    public final TableField<MailRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 생성자 ID");

    /**
     * The column <code>nexus.MAIL.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public final TableField<MailRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 수정 날짜");

    /**
     * The column <code>nexus.MAIL.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public final TableField<MailRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 수정자 ID");

    /**
     * The column <code>nexus.MAIL.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public final TableField<MailRecord, String> IS_DEL = createField(DSL.name("IS_DEL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "데이터 삭제 여부 (기본값 N)");

    private JMail(Name alias, Table<MailRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JMail(Name alias, Table<MailRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>nexus.MAIL</code> table reference
     */
    public JMail(String alias) {
        this(DSL.name(alias), MAIL);
    }

    /**
     * Create an aliased <code>nexus.MAIL</code> table reference
     */
    public JMail(Name alias) {
        this(alias, MAIL);
    }

    /**
     * Create a <code>nexus.MAIL</code> table reference
     */
    public JMail() {
        this(DSL.name("MAIL"), null);
    }

    public <O extends Record> JMail(Table<O> path, ForeignKey<O, MailRecord> childPath, InverseForeignKey<O, MailRecord> parentPath) {
        super(path, childPath, parentPath, MAIL);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MailPath extends JMail implements Path<MailRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MailPath(Table<O> path, ForeignKey<O, MailRecord> childPath, InverseForeignKey<O, MailRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MailPath(Name alias, Table<MailRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MailPath as(String alias) {
            return new MailPath(DSL.name(alias), this);
        }

        @Override
        public MailPath as(Name alias) {
            return new MailPath(alias, this);
        }

        @Override
        public MailPath as(Table<?> alias) {
            return new MailPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JNexus.NEXUS;
    }

    @Override
    public UniqueKey<MailRecord> getPrimaryKey() {
        return Keys.MAIL_PKEY;
    }

    @Override
    public List<ForeignKey<MailRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MAIL__MAIL_GAME_ID_FOREIGN);
    }

    private transient GamePath _game;

    /**
     * Get the implicit join path to the <code>nexus.GAME</code> table.
     */
    public GamePath game() {
        if (_game == null)
            _game = new GamePath(this, Keys.MAIL__MAIL_GAME_ID_FOREIGN, null);

        return _game;
    }

    private transient UserMailPath _userMail;

    /**
     * Get the implicit to-many join path to the <code>nexus.USER_MAIL</code>
     * table
     */
    public UserMailPath userMail() {
        if (_userMail == null)
            _userMail = new UserMailPath(this, null, Keys.USER_MAIL__USER_MAIL_MAIL_ID_FOREIGN.getInverseKey());

        return _userMail;
    }

    @Override
    public List<Check<MailRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("MAIL_SEND_TYPE_check"), "(((\"SEND_TYPE\")::text = ANY ((ARRAY['SYSTEM'::character varying, 'ADMIN'::character varying, 'EVENT'::character varying])::text[])))", true)
        );
    }

    @Override
    public JMail as(String alias) {
        return new JMail(DSL.name(alias), this);
    }

    @Override
    public JMail as(Name alias) {
        return new JMail(alias, this);
    }

    @Override
    public JMail as(Table<?> alias) {
        return new JMail(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JMail rename(String name) {
        return new JMail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JMail rename(Name name) {
        return new JMail(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JMail rename(Table<?> name) {
        return new JMail(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMail where(Condition condition) {
        return new JMail(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMail where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMail where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMail where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMail where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMail where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMail where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMail where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMail whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMail whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
