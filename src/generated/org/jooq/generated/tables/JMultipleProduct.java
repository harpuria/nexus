/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JNexus;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JCurrency.CurrencyPath;
import org.jooq.generated.tables.JProduct.ProductPath;
import org.jooq.generated.tables.records.MultipleProductRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JMultipleProduct extends TableImpl<MultipleProductRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nexus.MULTIPLE_PRODUCT</code>
     */
    public static final JMultipleProduct MULTIPLE_PRODUCT = new JMultipleProduct();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MultipleProductRecord> getRecordType() {
        return MultipleProductRecord.class;
    }

    /**
     * The column <code>nexus.MULTIPLE_PRODUCT.MULTIPLE_PRODUCT_ID</code>. 복합 상품
     * 아이디 (PK)
     */
    public final TableField<MultipleProductRecord, Integer> MULTIPLE_PRODUCT_ID = createField(DSL.name("MULTIPLE_PRODUCT_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('nexus.\"MULTIPLE_PRODUCT_MULTIPLE_PRODUCT_ID_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "복합 상품 아이디 (PK)");

    /**
     * The column <code>nexus.MULTIPLE_PRODUCT.PRODUCT_ID</code>. 상품 아이디 (FK)
     */
    public final TableField<MultipleProductRecord, Integer> PRODUCT_ID = createField(DSL.name("PRODUCT_ID"), SQLDataType.INTEGER.nullable(false), this, "상품 아이디 (FK)");

    /**
     * The column <code>nexus.MULTIPLE_PRODUCT.CURRENCY_ID</code>. 지급할 재화 아이디
     * (FK)
     */
    public final TableField<MultipleProductRecord, Integer> CURRENCY_ID = createField(DSL.name("CURRENCY_ID"), SQLDataType.INTEGER.nullable(false), this, "지급할 재화 아이디 (FK)");

    /**
     * The column <code>nexus.MULTIPLE_PRODUCT.AMOUNT</code>. 지급할 수량
     */
    public final TableField<MultipleProductRecord, Long> AMOUNT = createField(DSL.name("AMOUNT"), SQLDataType.BIGINT.nullable(false), this, "지급할 수량");

    /**
     * The column <code>nexus.MULTIPLE_PRODUCT.CREATED_AT</code>. 데이터 생성 날짜
     */
    public final TableField<MultipleProductRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 생성 날짜");

    /**
     * The column <code>nexus.MULTIPLE_PRODUCT.CREATED_BY</code>. 데이터 생성자 ID
     */
    public final TableField<MultipleProductRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 생성자 ID");

    /**
     * The column <code>nexus.MULTIPLE_PRODUCT.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public final TableField<MultipleProductRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 수정 날짜");

    /**
     * The column <code>nexus.MULTIPLE_PRODUCT.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public final TableField<MultipleProductRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 수정자 ID");

    /**
     * The column <code>nexus.MULTIPLE_PRODUCT.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public final TableField<MultipleProductRecord, String> IS_DEL = createField(DSL.name("IS_DEL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "데이터 삭제 여부 (기본값 N)");

    private JMultipleProduct(Name alias, Table<MultipleProductRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JMultipleProduct(Name alias, Table<MultipleProductRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>nexus.MULTIPLE_PRODUCT</code> table reference
     */
    public JMultipleProduct(String alias) {
        this(DSL.name(alias), MULTIPLE_PRODUCT);
    }

    /**
     * Create an aliased <code>nexus.MULTIPLE_PRODUCT</code> table reference
     */
    public JMultipleProduct(Name alias) {
        this(alias, MULTIPLE_PRODUCT);
    }

    /**
     * Create a <code>nexus.MULTIPLE_PRODUCT</code> table reference
     */
    public JMultipleProduct() {
        this(DSL.name("MULTIPLE_PRODUCT"), null);
    }

    public <O extends Record> JMultipleProduct(Table<O> path, ForeignKey<O, MultipleProductRecord> childPath, InverseForeignKey<O, MultipleProductRecord> parentPath) {
        super(path, childPath, parentPath, MULTIPLE_PRODUCT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MultipleProductPath extends JMultipleProduct implements Path<MultipleProductRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MultipleProductPath(Table<O> path, ForeignKey<O, MultipleProductRecord> childPath, InverseForeignKey<O, MultipleProductRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MultipleProductPath(Name alias, Table<MultipleProductRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MultipleProductPath as(String alias) {
            return new MultipleProductPath(DSL.name(alias), this);
        }

        @Override
        public MultipleProductPath as(Name alias) {
            return new MultipleProductPath(alias, this);
        }

        @Override
        public MultipleProductPath as(Table<?> alias) {
            return new MultipleProductPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JNexus.NEXUS;
    }

    @Override
    public UniqueKey<MultipleProductRecord> getPrimaryKey() {
        return Keys.MULTIPLE_PRODUCT_PKEY;
    }

    @Override
    public List<ForeignKey<MultipleProductRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MULTIPLE_PRODUCT__MULTIPLE_PRODUCT_CURRENCY_ID_FOREIGN, Keys.MULTIPLE_PRODUCT__MULTIPLE_PRODUCT_PRODUCT_ID_FOREIGN);
    }

    private transient CurrencyPath _currency;

    /**
     * Get the implicit join path to the <code>nexus.CURRENCY</code> table.
     */
    public CurrencyPath currency() {
        if (_currency == null)
            _currency = new CurrencyPath(this, Keys.MULTIPLE_PRODUCT__MULTIPLE_PRODUCT_CURRENCY_ID_FOREIGN, null);

        return _currency;
    }

    private transient ProductPath _product;

    /**
     * Get the implicit join path to the <code>nexus.PRODUCT</code> table.
     */
    public ProductPath product() {
        if (_product == null)
            _product = new ProductPath(this, Keys.MULTIPLE_PRODUCT__MULTIPLE_PRODUCT_PRODUCT_ID_FOREIGN, null);

        return _product;
    }

    @Override
    public JMultipleProduct as(String alias) {
        return new JMultipleProduct(DSL.name(alias), this);
    }

    @Override
    public JMultipleProduct as(Name alias) {
        return new JMultipleProduct(alias, this);
    }

    @Override
    public JMultipleProduct as(Table<?> alias) {
        return new JMultipleProduct(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JMultipleProduct rename(String name) {
        return new JMultipleProduct(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JMultipleProduct rename(Name name) {
        return new JMultipleProduct(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JMultipleProduct rename(Table<?> name) {
        return new JMultipleProduct(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMultipleProduct where(Condition condition) {
        return new JMultipleProduct(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMultipleProduct where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMultipleProduct where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMultipleProduct where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMultipleProduct where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMultipleProduct where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMultipleProduct where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMultipleProduct where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMultipleProduct whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMultipleProduct whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
