/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JNexus;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JAdmin.AdminPath;
import org.jooq.generated.tables.JGame.GamePath;
import org.jooq.generated.tables.records.OrganizationRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JOrganization extends TableImpl<OrganizationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nexus.ORGANIZATION</code>
     */
    public static final JOrganization ORGANIZATION = new JOrganization();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationRecord> getRecordType() {
        return OrganizationRecord.class;
    }

    /**
     * The column <code>nexus.ORGANIZATION.ORG_ID</code>. ORGANIZATION 테이블 기본키
     * (PK)
     */
    public final TableField<OrganizationRecord, Integer> ORG_ID = createField(DSL.name("ORG_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('\"ORGANIZATION_ORG_ID_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "ORGANIZATION 테이블 기본키 (PK)");

    /**
     * The column <code>nexus.ORGANIZATION.ORG_NM</code>. 단체명
     */
    public final TableField<OrganizationRecord, String> ORG_NM = createField(DSL.name("ORG_NM"), SQLDataType.VARCHAR(255).nullable(false), this, "단체명");

    /**
     * The column <code>nexus.ORGANIZATION.ORG_CD</code>. 단체 코드(사업자번호 등, 생략가능)
     */
    public final TableField<OrganizationRecord, String> ORG_CD = createField(DSL.name("ORG_CD"), SQLDataType.VARCHAR(100), this, "단체 코드(사업자번호 등, 생략가능)");

    /**
     * The column <code>nexus.ORGANIZATION.LOGO_PATH</code>. 단체 로고 이미지 경로
     */
    public final TableField<OrganizationRecord, String> LOGO_PATH = createField(DSL.name("LOGO_PATH"), SQLDataType.VARCHAR(255), this, "단체 로고 이미지 경로");

    /**
     * The column <code>nexus.ORGANIZATION.CREATED_AT</code>. 데이터 생성 날짜
     */
    public final TableField<OrganizationRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 생성 날짜");

    /**
     * The column <code>nexus.ORGANIZATION.CREATED_BY</code>. 데이터 생성자 ID
     */
    public final TableField<OrganizationRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 생성자 ID");

    /**
     * The column <code>nexus.ORGANIZATION.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public final TableField<OrganizationRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 수정 날짜");

    /**
     * The column <code>nexus.ORGANIZATION.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public final TableField<OrganizationRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 수정자 ID");

    /**
     * The column <code>nexus.ORGANIZATION.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public final TableField<OrganizationRecord, String> IS_DEL = createField(DSL.name("IS_DEL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "데이터 삭제 여부 (기본값 N)");

    private JOrganization(Name alias, Table<OrganizationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JOrganization(Name alias, Table<OrganizationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>nexus.ORGANIZATION</code> table reference
     */
    public JOrganization(String alias) {
        this(DSL.name(alias), ORGANIZATION);
    }

    /**
     * Create an aliased <code>nexus.ORGANIZATION</code> table reference
     */
    public JOrganization(Name alias) {
        this(alias, ORGANIZATION);
    }

    /**
     * Create a <code>nexus.ORGANIZATION</code> table reference
     */
    public JOrganization() {
        this(DSL.name("ORGANIZATION"), null);
    }

    public <O extends Record> JOrganization(Table<O> path, ForeignKey<O, OrganizationRecord> childPath, InverseForeignKey<O, OrganizationRecord> parentPath) {
        super(path, childPath, parentPath, ORGANIZATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrganizationPath extends JOrganization implements Path<OrganizationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OrganizationPath(Table<O> path, ForeignKey<O, OrganizationRecord> childPath, InverseForeignKey<O, OrganizationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrganizationPath(Name alias, Table<OrganizationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrganizationPath as(String alias) {
            return new OrganizationPath(DSL.name(alias), this);
        }

        @Override
        public OrganizationPath as(Name alias) {
            return new OrganizationPath(alias, this);
        }

        @Override
        public OrganizationPath as(Table<?> alias) {
            return new OrganizationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JNexus.NEXUS;
    }

    @Override
    public UniqueKey<OrganizationRecord> getPrimaryKey() {
        return Keys.ORGANIZATION_PKEY;
    }

    private transient AdminPath _admin;

    /**
     * Get the implicit to-many join path to the <code>nexus.ADMIN</code> table
     */
    public AdminPath admin() {
        if (_admin == null)
            _admin = new AdminPath(this, null, Keys.ADMIN__ADMIN_ORG_ID_FOREIGN.getInverseKey());

        return _admin;
    }

    private transient GamePath _game;

    /**
     * Get the implicit to-many join path to the <code>nexus.GAME</code> table
     */
    public GamePath game() {
        if (_game == null)
            _game = new GamePath(this, null, Keys.GAME__GAME_ORG_ID_FOREIGN.getInverseKey());

        return _game;
    }

    @Override
    public JOrganization as(String alias) {
        return new JOrganization(DSL.name(alias), this);
    }

    @Override
    public JOrganization as(Name alias) {
        return new JOrganization(alias, this);
    }

    @Override
    public JOrganization as(Table<?> alias) {
        return new JOrganization(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JOrganization rename(String name) {
        return new JOrganization(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOrganization rename(Name name) {
        return new JOrganization(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOrganization rename(Table<?> name) {
        return new JOrganization(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrganization where(Condition condition) {
        return new JOrganization(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrganization where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrganization where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrganization where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOrganization where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOrganization where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOrganization where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOrganization where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrganization whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrganization whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
