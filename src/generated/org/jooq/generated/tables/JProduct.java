/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JNexus;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JGame.GamePath;
import org.jooq.generated.tables.JMultipleProduct.MultipleProductPath;
import org.jooq.generated.tables.JSingleProduct.SingleProductPath;
import org.jooq.generated.tables.records.ProductRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JProduct extends TableImpl<ProductRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nexus.PRODUCT</code>
     */
    public static final JProduct PRODUCT = new JProduct();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductRecord> getRecordType() {
        return ProductRecord.class;
    }

    /**
     * The column <code>nexus.PRODUCT.PRODUCT_ID</code>. 상품 아이디 (PK)
     */
    public final TableField<ProductRecord, Integer> PRODUCT_ID = createField(DSL.name("PRODUCT_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('nexus.\"PRODUCT_PRODUCT_ID_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "상품 아이디 (PK)");

    /**
     * The column <code>nexus.PRODUCT.GAME_ID</code>. 상품이 적용될 게임 아이디 (FK)
     */
    public final TableField<ProductRecord, Integer> GAME_ID = createField(DSL.name("GAME_ID"), SQLDataType.INTEGER.nullable(false), this, "상품이 적용될 게임 아이디 (FK)");

    /**
     * The column <code>nexus.PRODUCT.PRODUCT_TYPE</code>. 상품 타입 (단일, 복합(패키지))
     */
    public final TableField<ProductRecord, String> PRODUCT_TYPE = createField(DSL.name("PRODUCT_TYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "상품 타입 (단일, 복합(패키지))");

    /**
     * The column <code>nexus.PRODUCT.PURCHASE_TYPE</code>.
     */
    public final TableField<ProductRecord, String> PURCHASE_TYPE = createField(DSL.name("PURCHASE_TYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>nexus.PRODUCT.CURRENCY_ID</code>. 상품 타입이 CURRENCY 인 경우,
     * 구매재화 아이디 (FK)
     */
    public final TableField<ProductRecord, Integer> CURRENCY_ID = createField(DSL.name("CURRENCY_ID"), SQLDataType.INTEGER, this, "상품 타입이 CURRENCY 인 경우, 구매재화 아이디 (FK)");

    /**
     * The column <code>nexus.PRODUCT.NAME</code>. 상품 이름
     */
    public final TableField<ProductRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "상품 이름");

    /**
     * The column <code>nexus.PRODUCT.DESC</code>. 상품 설명
     */
    public final TableField<ProductRecord, String> DESC = createField(DSL.name("DESC"), SQLDataType.CLOB.nullable(false), this, "상품 설명");

    /**
     * The column <code>nexus.PRODUCT.PRICE</code>. 상품가격
     */
    public final TableField<ProductRecord, BigDecimal> PRICE = createField(DSL.name("PRICE"), SQLDataType.NUMERIC(15, 2).nullable(false), this, "상품가격");

    /**
     * The column <code>nexus.PRODUCT.CREATED_AT</code>. 데이터 생성 날짜
     */
    public final TableField<ProductRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 생성 날짜");

    /**
     * The column <code>nexus.PRODUCT.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public final TableField<ProductRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 수정 날짜");

    /**
     * The column <code>nexus.PRODUCT.CREATED_BY</code>. 데이터 생성자 ID
     */
    public final TableField<ProductRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 생성자 ID");

    /**
     * The column <code>nexus.PRODUCT.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public final TableField<ProductRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 수정자 ID");

    /**
     * The column <code>nexus.PRODUCT.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public final TableField<ProductRecord, String> IS_DEL = createField(DSL.name("IS_DEL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "데이터 삭제 여부 (기본값 N)");

    private JProduct(Name alias, Table<ProductRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JProduct(Name alias, Table<ProductRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>nexus.PRODUCT</code> table reference
     */
    public JProduct(String alias) {
        this(DSL.name(alias), PRODUCT);
    }

    /**
     * Create an aliased <code>nexus.PRODUCT</code> table reference
     */
    public JProduct(Name alias) {
        this(alias, PRODUCT);
    }

    /**
     * Create a <code>nexus.PRODUCT</code> table reference
     */
    public JProduct() {
        this(DSL.name("PRODUCT"), null);
    }

    public <O extends Record> JProduct(Table<O> path, ForeignKey<O, ProductRecord> childPath, InverseForeignKey<O, ProductRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProductPath extends JProduct implements Path<ProductRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProductPath(Table<O> path, ForeignKey<O, ProductRecord> childPath, InverseForeignKey<O, ProductRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductPath(Name alias, Table<ProductRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductPath as(String alias) {
            return new ProductPath(DSL.name(alias), this);
        }

        @Override
        public ProductPath as(Name alias) {
            return new ProductPath(alias, this);
        }

        @Override
        public ProductPath as(Table<?> alias) {
            return new ProductPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JNexus.NEXUS;
    }

    @Override
    public UniqueKey<ProductRecord> getPrimaryKey() {
        return Keys.PRODUCT_PKEY;
    }

    @Override
    public List<ForeignKey<ProductRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCT__PRODUCT_GAME_ID_FOREIGN);
    }

    private transient GamePath _game;

    /**
     * Get the implicit join path to the <code>nexus.GAME</code> table.
     */
    public GamePath game() {
        if (_game == null)
            _game = new GamePath(this, Keys.PRODUCT__PRODUCT_GAME_ID_FOREIGN, null);

        return _game;
    }

    private transient MultipleProductPath _multipleProduct;

    /**
     * Get the implicit to-many join path to the
     * <code>nexus.MULTIPLE_PRODUCT</code> table
     */
    public MultipleProductPath multipleProduct() {
        if (_multipleProduct == null)
            _multipleProduct = new MultipleProductPath(this, null, Keys.MULTIPLE_PRODUCT__MULTIPLE_PRODUCT_PRODUCT_ID_FOREIGN.getInverseKey());

        return _multipleProduct;
    }

    private transient SingleProductPath _singleProduct;

    /**
     * Get the implicit to-many join path to the
     * <code>nexus.SINGLE_PRODUCT</code> table
     */
    public SingleProductPath singleProduct() {
        if (_singleProduct == null)
            _singleProduct = new SingleProductPath(this, null, Keys.SINGLE_PRODUCT__SINGLE_PRODUCT_PRODUCT_ID_FOREIGN.getInverseKey());

        return _singleProduct;
    }

    @Override
    public List<Check<ProductRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("PRODUCT_PRODUCT_TYPE_check"), "(((\"PRODUCT_TYPE\")::text = ANY ((ARRAY['SINGLE'::character varying, 'MULTIPLE'::character varying])::text[])))", true),
            Internal.createCheck(this, DSL.name("PRODUCT_PURCHASE_TYPE_check"), "(((\"PURCHASE_TYPE\")::text = ANY ((ARRAY['CASH'::character varying, 'CURRENCY'::character varying])::text[])))", true)
        );
    }

    @Override
    public JProduct as(String alias) {
        return new JProduct(DSL.name(alias), this);
    }

    @Override
    public JProduct as(Name alias) {
        return new JProduct(alias, this);
    }

    @Override
    public JProduct as(Table<?> alias) {
        return new JProduct(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JProduct rename(String name) {
        return new JProduct(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JProduct rename(Name name) {
        return new JProduct(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JProduct rename(Table<?> name) {
        return new JProduct(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JProduct where(Condition condition) {
        return new JProduct(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JProduct where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JProduct where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JProduct where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JProduct where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JProduct where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JProduct where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JProduct where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JProduct whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JProduct whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
