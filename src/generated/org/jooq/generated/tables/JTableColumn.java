/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JNexus;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JGameTable.GameTablePath;
import org.jooq.generated.tables.JUserColumnData.UserColumnDataPath;
import org.jooq.generated.tables.records.TableColumnRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JTableColumn extends TableImpl<TableColumnRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nexus.TABLE_COLUMN</code>
     */
    public static final JTableColumn TABLE_COLUMN = new JTableColumn();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TableColumnRecord> getRecordType() {
        return TableColumnRecord.class;
    }

    /**
     * The column <code>nexus.TABLE_COLUMN.COLUMN_ID</code>.
     */
    public final TableField<TableColumnRecord, Integer> COLUMN_ID = createField(DSL.name("COLUMN_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('nexus.\"TABLE_COLUMN_COLUMN_ID_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>nexus.TABLE_COLUMN.TABLE_ID</code>.
     */
    public final TableField<TableColumnRecord, Integer> TABLE_ID = createField(DSL.name("TABLE_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>nexus.TABLE_COLUMN.COLUMN_NAME</code>.
     */
    public final TableField<TableColumnRecord, String> COLUMN_NAME = createField(DSL.name("COLUMN_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>nexus.TABLE_COLUMN.COLUMN_DESC</code>.
     */
    public final TableField<TableColumnRecord, String> COLUMN_DESC = createField(DSL.name("COLUMN_DESC"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>nexus.TABLE_COLUMN.COLUMN_TYPE</code>.
     */
    public final TableField<TableColumnRecord, String> COLUMN_TYPE = createField(DSL.name("COLUMN_TYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>nexus.TABLE_COLUMN.DEFAULT_VALUE</code>.
     */
    public final TableField<TableColumnRecord, String> DEFAULT_VALUE = createField(DSL.name("DEFAULT_VALUE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>nexus.TABLE_COLUMN.CREATED_AT</code>. 데이터 생성 날짜
     */
    public final TableField<TableColumnRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 생성 날짜");

    /**
     * The column <code>nexus.TABLE_COLUMN.CREATED_BY</code>. 데이터 생성자 ID
     */
    public final TableField<TableColumnRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 생성자 ID");

    /**
     * The column <code>nexus.TABLE_COLUMN.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public final TableField<TableColumnRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 수정 날짜");

    /**
     * The column <code>nexus.TABLE_COLUMN.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public final TableField<TableColumnRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 수정자 ID");

    /**
     * The column <code>nexus.TABLE_COLUMN.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public final TableField<TableColumnRecord, String> IS_DEL = createField(DSL.name("IS_DEL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "데이터 삭제 여부 (기본값 N)");

    private JTableColumn(Name alias, Table<TableColumnRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JTableColumn(Name alias, Table<TableColumnRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>nexus.TABLE_COLUMN</code> table reference
     */
    public JTableColumn(String alias) {
        this(DSL.name(alias), TABLE_COLUMN);
    }

    /**
     * Create an aliased <code>nexus.TABLE_COLUMN</code> table reference
     */
    public JTableColumn(Name alias) {
        this(alias, TABLE_COLUMN);
    }

    /**
     * Create a <code>nexus.TABLE_COLUMN</code> table reference
     */
    public JTableColumn() {
        this(DSL.name("TABLE_COLUMN"), null);
    }

    public <O extends Record> JTableColumn(Table<O> path, ForeignKey<O, TableColumnRecord> childPath, InverseForeignKey<O, TableColumnRecord> parentPath) {
        super(path, childPath, parentPath, TABLE_COLUMN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TableColumnPath extends JTableColumn implements Path<TableColumnRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TableColumnPath(Table<O> path, ForeignKey<O, TableColumnRecord> childPath, InverseForeignKey<O, TableColumnRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TableColumnPath(Name alias, Table<TableColumnRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TableColumnPath as(String alias) {
            return new TableColumnPath(DSL.name(alias), this);
        }

        @Override
        public TableColumnPath as(Name alias) {
            return new TableColumnPath(alias, this);
        }

        @Override
        public TableColumnPath as(Table<?> alias) {
            return new TableColumnPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JNexus.NEXUS;
    }

    @Override
    public UniqueKey<TableColumnRecord> getPrimaryKey() {
        return Keys.TABLE_COLUMN_PKEY;
    }

    @Override
    public List<ForeignKey<TableColumnRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TABLE_COLUMN__TABLE_COLUMN_TABLE_ID_FOREIGN);
    }

    private transient GameTablePath _gameTable;

    /**
     * Get the implicit join path to the <code>nexus.GAME_TABLE</code> table.
     */
    public GameTablePath gameTable() {
        if (_gameTable == null)
            _gameTable = new GameTablePath(this, Keys.TABLE_COLUMN__TABLE_COLUMN_TABLE_ID_FOREIGN, null);

        return _gameTable;
    }

    private transient UserColumnDataPath _userColumnData;

    /**
     * Get the implicit to-many join path to the
     * <code>nexus.USER_COLUMN_DATA</code> table
     */
    public UserColumnDataPath userColumnData() {
        if (_userColumnData == null)
            _userColumnData = new UserColumnDataPath(this, null, Keys.USER_COLUMN_DATA__USER_COLUMN_DATA_COLUMN_ID_FOREIGN.getInverseKey());

        return _userColumnData;
    }

    @Override
    public JTableColumn as(String alias) {
        return new JTableColumn(DSL.name(alias), this);
    }

    @Override
    public JTableColumn as(Name alias) {
        return new JTableColumn(alias, this);
    }

    @Override
    public JTableColumn as(Table<?> alias) {
        return new JTableColumn(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JTableColumn rename(String name) {
        return new JTableColumn(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTableColumn rename(Name name) {
        return new JTableColumn(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTableColumn rename(Table<?> name) {
        return new JTableColumn(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTableColumn where(Condition condition) {
        return new JTableColumn(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTableColumn where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTableColumn where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTableColumn where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTableColumn where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTableColumn where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTableColumn where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTableColumn where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTableColumn whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTableColumn whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
