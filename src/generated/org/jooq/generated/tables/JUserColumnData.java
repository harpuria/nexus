/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JNexus;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JGameUser.GameUserPath;
import org.jooq.generated.tables.JTableColumn.TableColumnPath;
import org.jooq.generated.tables.records.UserColumnDataRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JUserColumnData extends TableImpl<UserColumnDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nexus.USER_COLUMN_DATA</code>
     */
    public static final JUserColumnData USER_COLUMN_DATA = new JUserColumnData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserColumnDataRecord> getRecordType() {
        return UserColumnDataRecord.class;
    }

    /**
     * The column <code>nexus.USER_COLUMN_DATA.USER_COLUMN_ID</code>.
     * USER_COLUNM_DATA 테이블 기본키 (PK)
     */
    public final TableField<UserColumnDataRecord, Integer> USER_COLUMN_ID = createField(DSL.name("USER_COLUMN_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('nexus.\"USER_COLUMN_DATA_USER_COLUMN_ID_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "USER_COLUNM_DATA 테이블 기본키 (PK)");

    /**
     * The column <code>nexus.USER_COLUMN_DATA.USER_ID</code>. GAME_USER 기본키
     * (PK)
     */
    public final TableField<UserColumnDataRecord, Integer> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.INTEGER.nullable(false), this, "GAME_USER 기본키 (PK)");

    /**
     * The column <code>nexus.USER_COLUMN_DATA.TABLE_ID</code>. GAME_TABLE 기본키
     * (PK)
     */
    public final TableField<UserColumnDataRecord, Integer> TABLE_ID = createField(DSL.name("TABLE_ID"), SQLDataType.INTEGER.nullable(false), this, "GAME_TABLE 기본키 (PK)");

    /**
     * The column <code>nexus.USER_COLUMN_DATA.COLUMN_ID</code>. TABLE_COLUMN
     * 기본키 (PK)
     */
    public final TableField<UserColumnDataRecord, Integer> COLUMN_ID = createField(DSL.name("COLUMN_ID"), SQLDataType.INTEGER.nullable(false), this, "TABLE_COLUMN 기본키 (PK)");

    /**
     * The column <code>nexus.USER_COLUMN_DATA.RECORD_ID</code>. 해당 테이블에 여러 행을
     * 넣기 위한 구분자
     */
    public final TableField<UserColumnDataRecord, Integer> RECORD_ID = createField(DSL.name("RECORD_ID"), SQLDataType.INTEGER.nullable(false), this, "해당 테이블에 여러 행을 넣기 위한 구분자");

    /**
     * The column <code>nexus.USER_COLUMN_DATA.VALUE_STRING</code>. STRING 타입 값
     */
    public final TableField<UserColumnDataRecord, String> VALUE_STRING = createField(DSL.name("VALUE_STRING"), SQLDataType.VARCHAR(255).nullable(false), this, "STRING 타입 값");

    /**
     * The column <code>nexus.USER_COLUMN_DATA.VALUE_NUMBER</code>. NUMBER 타입 값
     */
    public final TableField<UserColumnDataRecord, Long> VALUE_NUMBER = createField(DSL.name("VALUE_NUMBER"), SQLDataType.BIGINT.nullable(false), this, "NUMBER 타입 값");

    /**
     * The column <code>nexus.USER_COLUMN_DATA.VALUE_DATE</code>. DATE 타입 값
     */
    public final TableField<UserColumnDataRecord, OffsetDateTime> VALUE_DATE = createField(DSL.name("VALUE_DATE"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "DATE 타입 값");

    /**
     * The column <code>nexus.USER_COLUMN_DATA.CREATED_AT</code>. 데이터 생성 날짜
     */
    public final TableField<UserColumnDataRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 생성 날짜");

    /**
     * The column <code>nexus.USER_COLUMN_DATA.CREATED_BY</code>. 데이터 생성자 ID
     */
    public final TableField<UserColumnDataRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 생성자 ID");

    /**
     * The column <code>nexus.USER_COLUMN_DATA.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public final TableField<UserColumnDataRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 수정 날짜");

    /**
     * The column <code>nexus.USER_COLUMN_DATA.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public final TableField<UserColumnDataRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 수정자 ID");

    /**
     * The column <code>nexus.USER_COLUMN_DATA.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public final TableField<UserColumnDataRecord, String> IS_DEL = createField(DSL.name("IS_DEL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "데이터 삭제 여부 (기본값 N)");

    private JUserColumnData(Name alias, Table<UserColumnDataRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JUserColumnData(Name alias, Table<UserColumnDataRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>nexus.USER_COLUMN_DATA</code> table reference
     */
    public JUserColumnData(String alias) {
        this(DSL.name(alias), USER_COLUMN_DATA);
    }

    /**
     * Create an aliased <code>nexus.USER_COLUMN_DATA</code> table reference
     */
    public JUserColumnData(Name alias) {
        this(alias, USER_COLUMN_DATA);
    }

    /**
     * Create a <code>nexus.USER_COLUMN_DATA</code> table reference
     */
    public JUserColumnData() {
        this(DSL.name("USER_COLUMN_DATA"), null);
    }

    public <O extends Record> JUserColumnData(Table<O> path, ForeignKey<O, UserColumnDataRecord> childPath, InverseForeignKey<O, UserColumnDataRecord> parentPath) {
        super(path, childPath, parentPath, USER_COLUMN_DATA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserColumnDataPath extends JUserColumnData implements Path<UserColumnDataRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserColumnDataPath(Table<O> path, ForeignKey<O, UserColumnDataRecord> childPath, InverseForeignKey<O, UserColumnDataRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserColumnDataPath(Name alias, Table<UserColumnDataRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserColumnDataPath as(String alias) {
            return new UserColumnDataPath(DSL.name(alias), this);
        }

        @Override
        public UserColumnDataPath as(Name alias) {
            return new UserColumnDataPath(alias, this);
        }

        @Override
        public UserColumnDataPath as(Table<?> alias) {
            return new UserColumnDataPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JNexus.NEXUS;
    }

    @Override
    public UniqueKey<UserColumnDataRecord> getPrimaryKey() {
        return Keys.USER_COLUMN_DATA_PKEY;
    }

    @Override
    public List<ForeignKey<UserColumnDataRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_COLUMN_DATA__USER_COLUMN_DATA_COLUMN_ID_FOREIGN, Keys.USER_COLUMN_DATA__USER_COLUMN_DATA_USER_ID_FOREIGN);
    }

    private transient TableColumnPath _tableColumn;

    /**
     * Get the implicit join path to the <code>nexus.TABLE_COLUMN</code> table.
     */
    public TableColumnPath tableColumn() {
        if (_tableColumn == null)
            _tableColumn = new TableColumnPath(this, Keys.USER_COLUMN_DATA__USER_COLUMN_DATA_COLUMN_ID_FOREIGN, null);

        return _tableColumn;
    }

    private transient GameUserPath _gameUser;

    /**
     * Get the implicit join path to the <code>nexus.GAME_USER</code> table.
     */
    public GameUserPath gameUser() {
        if (_gameUser == null)
            _gameUser = new GameUserPath(this, Keys.USER_COLUMN_DATA__USER_COLUMN_DATA_USER_ID_FOREIGN, null);

        return _gameUser;
    }

    @Override
    public JUserColumnData as(String alias) {
        return new JUserColumnData(DSL.name(alias), this);
    }

    @Override
    public JUserColumnData as(Name alias) {
        return new JUserColumnData(alias, this);
    }

    @Override
    public JUserColumnData as(Table<?> alias) {
        return new JUserColumnData(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JUserColumnData rename(String name) {
        return new JUserColumnData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUserColumnData rename(Name name) {
        return new JUserColumnData(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUserColumnData rename(Table<?> name) {
        return new JUserColumnData(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUserColumnData where(Condition condition) {
        return new JUserColumnData(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUserColumnData where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUserColumnData where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUserColumnData where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUserColumnData where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUserColumnData where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUserColumnData where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUserColumnData where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUserColumnData whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUserColumnData whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
