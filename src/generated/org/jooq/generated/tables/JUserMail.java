/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JNexus;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JGameUser.GameUserPath;
import org.jooq.generated.tables.JMail.MailPath;
import org.jooq.generated.tables.records.UserMailRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JUserMail extends TableImpl<UserMailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nexus.USER_MAIL</code>
     */
    public static final JUserMail USER_MAIL = new JUserMail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserMailRecord> getRecordType() {
        return UserMailRecord.class;
    }

    /**
     * The column <code>nexus.USER_MAIL.USER_MAIL_ID</code>. 유저 우편 아이디 (PK)
     */
    public final TableField<UserMailRecord, Integer> USER_MAIL_ID = createField(DSL.name("USER_MAIL_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('nexus.\"USER_MAIL_USER_MAIL_ID_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "유저 우편 아이디 (PK)");

    /**
     * The column <code>nexus.USER_MAIL.MAIL_ID</code>. 우편 아이디 (FK)
     */
    public final TableField<UserMailRecord, Integer> MAIL_ID = createField(DSL.name("MAIL_ID"), SQLDataType.INTEGER.nullable(false), this, "우편 아이디 (FK)");

    /**
     * The column <code>nexus.USER_MAIL.USER_ID</code>. 유저 아이디 (FK)
     */
    public final TableField<UserMailRecord, Integer> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.INTEGER.nullable(false), this, "유저 아이디 (FK)");

    /**
     * The column <code>nexus.USER_MAIL.IS_READ</code>. 읽음 여부
     */
    public final TableField<UserMailRecord, String> IS_READ = createField(DSL.name("IS_READ"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "읽음 여부");

    /**
     * The column <code>nexus.USER_MAIL.IS_RECEIVED</code>. 보상 수령 여부
     */
    public final TableField<UserMailRecord, String> IS_RECEIVED = createField(DSL.name("IS_RECEIVED"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "보상 수령 여부");

    /**
     * The column <code>nexus.USER_MAIL.CREATED_AT</code>. 데이터 생성 날짜
     */
    public final TableField<UserMailRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 생성 날짜");

    /**
     * The column <code>nexus.USER_MAIL.CREATED_BY</code>. 데이터 생성자 ID
     */
    public final TableField<UserMailRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 생성자 ID");

    /**
     * The column <code>nexus.USER_MAIL.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public final TableField<UserMailRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "데이터 수정 날짜");

    /**
     * The column <code>nexus.USER_MAIL.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public final TableField<UserMailRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(64).nullable(false), this, "데이터 수정자 ID");

    /**
     * The column <code>nexus.USER_MAIL.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public final TableField<UserMailRecord, String> IS_DEL = createField(DSL.name("IS_DEL"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'::bpchar"), SQLDataType.CHAR)), this, "데이터 삭제 여부 (기본값 N)");

    private JUserMail(Name alias, Table<UserMailRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JUserMail(Name alias, Table<UserMailRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>nexus.USER_MAIL</code> table reference
     */
    public JUserMail(String alias) {
        this(DSL.name(alias), USER_MAIL);
    }

    /**
     * Create an aliased <code>nexus.USER_MAIL</code> table reference
     */
    public JUserMail(Name alias) {
        this(alias, USER_MAIL);
    }

    /**
     * Create a <code>nexus.USER_MAIL</code> table reference
     */
    public JUserMail() {
        this(DSL.name("USER_MAIL"), null);
    }

    public <O extends Record> JUserMail(Table<O> path, ForeignKey<O, UserMailRecord> childPath, InverseForeignKey<O, UserMailRecord> parentPath) {
        super(path, childPath, parentPath, USER_MAIL);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserMailPath extends JUserMail implements Path<UserMailRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserMailPath(Table<O> path, ForeignKey<O, UserMailRecord> childPath, InverseForeignKey<O, UserMailRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserMailPath(Name alias, Table<UserMailRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserMailPath as(String alias) {
            return new UserMailPath(DSL.name(alias), this);
        }

        @Override
        public UserMailPath as(Name alias) {
            return new UserMailPath(alias, this);
        }

        @Override
        public UserMailPath as(Table<?> alias) {
            return new UserMailPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JNexus.NEXUS;
    }

    @Override
    public UniqueKey<UserMailRecord> getPrimaryKey() {
        return Keys.USER_MAIL_PKEY;
    }

    @Override
    public List<ForeignKey<UserMailRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_MAIL__USER_MAIL_MAIL_ID_FOREIGN, Keys.USER_MAIL__USER_MAIL_USER_ID_FOREIGN);
    }

    private transient MailPath _mail;

    /**
     * Get the implicit join path to the <code>nexus.MAIL</code> table.
     */
    public MailPath mail() {
        if (_mail == null)
            _mail = new MailPath(this, Keys.USER_MAIL__USER_MAIL_MAIL_ID_FOREIGN, null);

        return _mail;
    }

    private transient GameUserPath _gameUser;

    /**
     * Get the implicit join path to the <code>nexus.GAME_USER</code> table.
     */
    public GameUserPath gameUser() {
        if (_gameUser == null)
            _gameUser = new GameUserPath(this, Keys.USER_MAIL__USER_MAIL_USER_ID_FOREIGN, null);

        return _gameUser;
    }

    @Override
    public JUserMail as(String alias) {
        return new JUserMail(DSL.name(alias), this);
    }

    @Override
    public JUserMail as(Name alias) {
        return new JUserMail(alias, this);
    }

    @Override
    public JUserMail as(Table<?> alias) {
        return new JUserMail(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JUserMail rename(String name) {
        return new JUserMail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUserMail rename(Name name) {
        return new JUserMail(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUserMail rename(Table<?> name) {
        return new JUserMail(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUserMail where(Condition condition) {
        return new JUserMail(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUserMail where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUserMail where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUserMail where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUserMail where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUserMail where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUserMail where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUserMail where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUserMail whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUserMail whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
