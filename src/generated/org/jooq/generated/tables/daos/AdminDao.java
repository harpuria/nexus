/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JAdmin;
import org.jooq.generated.tables.pojos.Admin;
import org.jooq.generated.tables.records.AdminRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AdminDao extends DAOImpl<AdminRecord, Admin, Integer> {

    /**
     * Create a new AdminDao without any configuration
     */
    public AdminDao() {
        super(JAdmin.ADMIN, Admin.class);
    }

    /**
     * Create a new AdminDao with an attached configuration
     */
    public AdminDao(Configuration configuration) {
        super(JAdmin.ADMIN, Admin.class, configuration);
    }

    @Override
    public Integer getId(Admin object) {
        return object.getAdminId();
    }

    /**
     * Fetch records that have <code>ADMIN_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Admin> fetchRangeOfJAdminId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JAdmin.ADMIN.ADMIN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ADMIN_ID IN (values)</code>
     */
    public List<Admin> fetchByJAdminId(Integer... values) {
        return fetch(JAdmin.ADMIN.ADMIN_ID, values);
    }

    /**
     * Fetch a unique record that has <code>ADMIN_ID = value</code>
     */
    public Admin fetchOneByJAdminId(Integer value) {
        return fetchOne(JAdmin.ADMIN.ADMIN_ID, value);
    }

    /**
     * Fetch a unique record that has <code>ADMIN_ID = value</code>
     */
    public Optional<Admin> fetchOptionalByJAdminId(Integer value) {
        return fetchOptional(JAdmin.ADMIN.ADMIN_ID, value);
    }

    /**
     * Fetch records that have <code>ORG_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Admin> fetchRangeOfJOrgId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JAdmin.ADMIN.ORG_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ORG_ID IN (values)</code>
     */
    public List<Admin> fetchByJOrgId(Integer... values) {
        return fetch(JAdmin.ADMIN.ORG_ID, values);
    }

    /**
     * Fetch records that have <code>GAME_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Admin> fetchRangeOfJGameId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JAdmin.ADMIN.GAME_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>GAME_ID IN (values)</code>
     */
    public List<Admin> fetchByJGameId(Integer... values) {
        return fetch(JAdmin.ADMIN.GAME_ID, values);
    }

    /**
     * Fetch records that have <code>LOGIN_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Admin> fetchRangeOfJLoginId(String lowerInclusive, String upperInclusive) {
        return fetchRange(JAdmin.ADMIN.LOGIN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>LOGIN_ID IN (values)</code>
     */
    public List<Admin> fetchByJLoginId(String... values) {
        return fetch(JAdmin.ADMIN.LOGIN_ID, values);
    }

    /**
     * Fetch a unique record that has <code>LOGIN_ID = value</code>
     */
    public Admin fetchOneByJLoginId(String value) {
        return fetchOne(JAdmin.ADMIN.LOGIN_ID, value);
    }

    /**
     * Fetch a unique record that has <code>LOGIN_ID = value</code>
     */
    public Optional<Admin> fetchOptionalByJLoginId(String value) {
        return fetchOptional(JAdmin.ADMIN.LOGIN_ID, value);
    }

    /**
     * Fetch records that have <code>LOGIN_PW BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Admin> fetchRangeOfJLoginPw(String lowerInclusive, String upperInclusive) {
        return fetchRange(JAdmin.ADMIN.LOGIN_PW, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>LOGIN_PW IN (values)</code>
     */
    public List<Admin> fetchByJLoginPw(String... values) {
        return fetch(JAdmin.ADMIN.LOGIN_PW, values);
    }

    /**
     * Fetch records that have <code>ADMIN_ROLE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Admin> fetchRangeOfJAdminRole(String lowerInclusive, String upperInclusive) {
        return fetchRange(JAdmin.ADMIN.ADMIN_ROLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ADMIN_ROLE IN (values)</code>
     */
    public List<Admin> fetchByJAdminRole(String... values) {
        return fetch(JAdmin.ADMIN.ADMIN_ROLE, values);
    }

    /**
     * Fetch records that have <code>ADMIN_EMAIL BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Admin> fetchRangeOfJAdminEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(JAdmin.ADMIN.ADMIN_EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ADMIN_EMAIL IN (values)</code>
     */
    public List<Admin> fetchByJAdminEmail(String... values) {
        return fetch(JAdmin.ADMIN.ADMIN_EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>ADMIN_EMAIL = value</code>
     */
    public Admin fetchOneByJAdminEmail(String value) {
        return fetchOne(JAdmin.ADMIN.ADMIN_EMAIL, value);
    }

    /**
     * Fetch a unique record that has <code>ADMIN_EMAIL = value</code>
     */
    public Optional<Admin> fetchOptionalByJAdminEmail(String value) {
        return fetchOptional(JAdmin.ADMIN.ADMIN_EMAIL, value);
    }

    /**
     * Fetch records that have <code>ADMIN_NM BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Admin> fetchRangeOfJAdminNm(String lowerInclusive, String upperInclusive) {
        return fetchRange(JAdmin.ADMIN.ADMIN_NM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ADMIN_NM IN (values)</code>
     */
    public List<Admin> fetchByJAdminNm(String... values) {
        return fetch(JAdmin.ADMIN.ADMIN_NM, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Admin> fetchRangeOfJCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JAdmin.ADMIN.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<Admin> fetchByJCreatedAt(OffsetDateTime... values) {
        return fetch(JAdmin.ADMIN.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Admin> fetchRangeOfJCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JAdmin.ADMIN.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<Admin> fetchByJCreatedBy(String... values) {
        return fetch(JAdmin.ADMIN.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Admin> fetchRangeOfJUpdatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JAdmin.ADMIN.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<Admin> fetchByJUpdatedAt(OffsetDateTime... values) {
        return fetch(JAdmin.ADMIN.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Admin> fetchRangeOfJUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JAdmin.ADMIN.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<Admin> fetchByJUpdatedBy(String... values) {
        return fetch(JAdmin.ADMIN.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>IS_DEL BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Admin> fetchRangeOfJIsDel(String lowerInclusive, String upperInclusive) {
        return fetchRange(JAdmin.ADMIN.IS_DEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>IS_DEL IN (values)</code>
     */
    public List<Admin> fetchByJIsDel(String... values) {
        return fetch(JAdmin.ADMIN.IS_DEL, values);
    }
}
