/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JCurrency;
import org.jooq.generated.tables.pojos.Currency;
import org.jooq.generated.tables.records.CurrencyRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CurrencyDao extends DAOImpl<CurrencyRecord, Currency, Integer> {

    /**
     * Create a new CurrencyDao without any configuration
     */
    public CurrencyDao() {
        super(JCurrency.CURRENCY, Currency.class);
    }

    /**
     * Create a new CurrencyDao with an attached configuration
     */
    public CurrencyDao(Configuration configuration) {
        super(JCurrency.CURRENCY, Currency.class, configuration);
    }

    @Override
    public Integer getId(Currency object) {
        return object.getCurrencyId();
    }

    /**
     * Fetch records that have <code>CURRENCY_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Currency> fetchRangeOfJCurrencyId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JCurrency.CURRENCY.CURRENCY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CURRENCY_ID IN (values)</code>
     */
    public List<Currency> fetchByJCurrencyId(Integer... values) {
        return fetch(JCurrency.CURRENCY.CURRENCY_ID, values);
    }

    /**
     * Fetch a unique record that has <code>CURRENCY_ID = value</code>
     */
    public Currency fetchOneByJCurrencyId(Integer value) {
        return fetchOne(JCurrency.CURRENCY.CURRENCY_ID, value);
    }

    /**
     * Fetch a unique record that has <code>CURRENCY_ID = value</code>
     */
    public Optional<Currency> fetchOptionalByJCurrencyId(Integer value) {
        return fetchOptional(JCurrency.CURRENCY.CURRENCY_ID, value);
    }

    /**
     * Fetch records that have <code>GAME_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Currency> fetchRangeOfJGameId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JCurrency.CURRENCY.GAME_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>GAME_ID IN (values)</code>
     */
    public List<Currency> fetchByJGameId(Integer... values) {
        return fetch(JCurrency.CURRENCY.GAME_ID, values);
    }

    /**
     * Fetch records that have <code>NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Currency> fetchRangeOfJName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCurrency.CURRENCY.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<Currency> fetchByJName(String... values) {
        return fetch(JCurrency.CURRENCY.NAME, values);
    }

    /**
     * Fetch records that have <code>DESC BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Currency> fetchRangeOfJDesc(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCurrency.CURRENCY.DESC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DESC IN (values)</code>
     */
    public List<Currency> fetchByJDesc(String... values) {
        return fetch(JCurrency.CURRENCY.DESC, values);
    }

    /**
     * Fetch records that have <code>MAX_AMOUNT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Currency> fetchRangeOfJMaxAmount(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JCurrency.CURRENCY.MAX_AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>MAX_AMOUNT IN (values)</code>
     */
    public List<Currency> fetchByJMaxAmount(Long... values) {
        return fetch(JCurrency.CURRENCY.MAX_AMOUNT, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Currency> fetchRangeOfJCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JCurrency.CURRENCY.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<Currency> fetchByJCreatedAt(OffsetDateTime... values) {
        return fetch(JCurrency.CURRENCY.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Currency> fetchRangeOfJCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCurrency.CURRENCY.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<Currency> fetchByJCreatedBy(String... values) {
        return fetch(JCurrency.CURRENCY.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Currency> fetchRangeOfJUpdatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JCurrency.CURRENCY.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<Currency> fetchByJUpdatedAt(OffsetDateTime... values) {
        return fetch(JCurrency.CURRENCY.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Currency> fetchRangeOfJUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCurrency.CURRENCY.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<Currency> fetchByJUpdatedBy(String... values) {
        return fetch(JCurrency.CURRENCY.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>IS_DEL BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Currency> fetchRangeOfJIsDel(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCurrency.CURRENCY.IS_DEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>IS_DEL IN (values)</code>
     */
    public List<Currency> fetchByJIsDel(String... values) {
        return fetch(JCurrency.CURRENCY.IS_DEL, values);
    }
}
