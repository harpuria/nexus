/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JGameTable;
import org.jooq.generated.tables.pojos.GameTable;
import org.jooq.generated.tables.records.GameTableRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GameTableDao extends DAOImpl<GameTableRecord, GameTable, Integer> {

    /**
     * Create a new GameTableDao without any configuration
     */
    public GameTableDao() {
        super(JGameTable.GAME_TABLE, GameTable.class);
    }

    /**
     * Create a new GameTableDao with an attached configuration
     */
    public GameTableDao(Configuration configuration) {
        super(JGameTable.GAME_TABLE, GameTable.class, configuration);
    }

    @Override
    public Integer getId(GameTable object) {
        return object.getTableId();
    }

    /**
     * Fetch records that have <code>TABLE_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GameTable> fetchRangeOfJTableId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JGameTable.GAME_TABLE.TABLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>TABLE_ID IN (values)</code>
     */
    public List<GameTable> fetchByJTableId(Integer... values) {
        return fetch(JGameTable.GAME_TABLE.TABLE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>TABLE_ID = value</code>
     */
    public GameTable fetchOneByJTableId(Integer value) {
        return fetchOne(JGameTable.GAME_TABLE.TABLE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>TABLE_ID = value</code>
     */
    public Optional<GameTable> fetchOptionalByJTableId(Integer value) {
        return fetchOptional(JGameTable.GAME_TABLE.TABLE_ID, value);
    }

    /**
     * Fetch records that have <code>GAME_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GameTable> fetchRangeOfJGameId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JGameTable.GAME_TABLE.GAME_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>GAME_ID IN (values)</code>
     */
    public List<GameTable> fetchByJGameId(Integer... values) {
        return fetch(JGameTable.GAME_TABLE.GAME_ID, values);
    }

    /**
     * Fetch records that have <code>NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GameTable> fetchRangeOfJName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JGameTable.GAME_TABLE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<GameTable> fetchByJName(String... values) {
        return fetch(JGameTable.GAME_TABLE.NAME, values);
    }

    /**
     * Fetch records that have <code>DESCRIPTION BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GameTable> fetchRangeOfJDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(JGameTable.GAME_TABLE.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DESCRIPTION IN (values)</code>
     */
    public List<GameTable> fetchByJDescription(String... values) {
        return fetch(JGameTable.GAME_TABLE.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GameTable> fetchRangeOfJCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JGameTable.GAME_TABLE.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<GameTable> fetchByJCreatedAt(OffsetDateTime... values) {
        return fetch(JGameTable.GAME_TABLE.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GameTable> fetchRangeOfJCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JGameTable.GAME_TABLE.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<GameTable> fetchByJCreatedBy(String... values) {
        return fetch(JGameTable.GAME_TABLE.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GameTable> fetchRangeOfJUpdatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JGameTable.GAME_TABLE.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<GameTable> fetchByJUpdatedAt(OffsetDateTime... values) {
        return fetch(JGameTable.GAME_TABLE.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GameTable> fetchRangeOfJUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JGameTable.GAME_TABLE.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<GameTable> fetchByJUpdatedBy(String... values) {
        return fetch(JGameTable.GAME_TABLE.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>IS_DEL BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<GameTable> fetchRangeOfJIsDel(String lowerInclusive, String upperInclusive) {
        return fetchRange(JGameTable.GAME_TABLE.IS_DEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>IS_DEL IN (values)</code>
     */
    public List<GameTable> fetchByJIsDel(String... values) {
        return fetch(JGameTable.GAME_TABLE.IS_DEL, values);
    }
}
