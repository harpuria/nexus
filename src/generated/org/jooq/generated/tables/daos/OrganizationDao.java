/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JOrganization;
import org.jooq.generated.tables.pojos.Organization;
import org.jooq.generated.tables.records.OrganizationRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OrganizationDao extends DAOImpl<OrganizationRecord, Organization, Integer> {

    /**
     * Create a new OrganizationDao without any configuration
     */
    public OrganizationDao() {
        super(JOrganization.ORGANIZATION, Organization.class);
    }

    /**
     * Create a new OrganizationDao with an attached configuration
     */
    public OrganizationDao(Configuration configuration) {
        super(JOrganization.ORGANIZATION, Organization.class, configuration);
    }

    @Override
    public Integer getId(Organization object) {
        return object.getOrgId();
    }

    /**
     * Fetch records that have <code>ORG_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Organization> fetchRangeOfJOrgId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JOrganization.ORGANIZATION.ORG_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ORG_ID IN (values)</code>
     */
    public List<Organization> fetchByJOrgId(Integer... values) {
        return fetch(JOrganization.ORGANIZATION.ORG_ID, values);
    }

    /**
     * Fetch a unique record that has <code>ORG_ID = value</code>
     */
    public Organization fetchOneByJOrgId(Integer value) {
        return fetchOne(JOrganization.ORGANIZATION.ORG_ID, value);
    }

    /**
     * Fetch a unique record that has <code>ORG_ID = value</code>
     */
    public Optional<Organization> fetchOptionalByJOrgId(Integer value) {
        return fetchOptional(JOrganization.ORGANIZATION.ORG_ID, value);
    }

    /**
     * Fetch records that have <code>ORG_NM BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Organization> fetchRangeOfJOrgNm(String lowerInclusive, String upperInclusive) {
        return fetchRange(JOrganization.ORGANIZATION.ORG_NM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ORG_NM IN (values)</code>
     */
    public List<Organization> fetchByJOrgNm(String... values) {
        return fetch(JOrganization.ORGANIZATION.ORG_NM, values);
    }

    /**
     * Fetch records that have <code>ORG_CD BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Organization> fetchRangeOfJOrgCd(String lowerInclusive, String upperInclusive) {
        return fetchRange(JOrganization.ORGANIZATION.ORG_CD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ORG_CD IN (values)</code>
     */
    public List<Organization> fetchByJOrgCd(String... values) {
        return fetch(JOrganization.ORGANIZATION.ORG_CD, values);
    }

    /**
     * Fetch records that have <code>LOGO_PATH BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Organization> fetchRangeOfJLogoPath(String lowerInclusive, String upperInclusive) {
        return fetchRange(JOrganization.ORGANIZATION.LOGO_PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>LOGO_PATH IN (values)</code>
     */
    public List<Organization> fetchByJLogoPath(String... values) {
        return fetch(JOrganization.ORGANIZATION.LOGO_PATH, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Organization> fetchRangeOfJCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JOrganization.ORGANIZATION.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<Organization> fetchByJCreatedAt(OffsetDateTime... values) {
        return fetch(JOrganization.ORGANIZATION.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Organization> fetchRangeOfJCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JOrganization.ORGANIZATION.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<Organization> fetchByJCreatedBy(String... values) {
        return fetch(JOrganization.ORGANIZATION.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Organization> fetchRangeOfJUpdatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JOrganization.ORGANIZATION.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<Organization> fetchByJUpdatedAt(OffsetDateTime... values) {
        return fetch(JOrganization.ORGANIZATION.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Organization> fetchRangeOfJUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JOrganization.ORGANIZATION.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<Organization> fetchByJUpdatedBy(String... values) {
        return fetch(JOrganization.ORGANIZATION.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>IS_DEL BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Organization> fetchRangeOfJIsDel(String lowerInclusive, String upperInclusive) {
        return fetchRange(JOrganization.ORGANIZATION.IS_DEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>IS_DEL IN (values)</code>
     */
    public List<Organization> fetchByJIsDel(String... values) {
        return fetch(JOrganization.ORGANIZATION.IS_DEL, values);
    }
}
