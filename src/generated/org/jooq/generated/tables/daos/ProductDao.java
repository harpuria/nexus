/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JProduct;
import org.jooq.generated.tables.pojos.Product;
import org.jooq.generated.tables.records.ProductRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductDao extends DAOImpl<ProductRecord, Product, Integer> {

    /**
     * Create a new ProductDao without any configuration
     */
    public ProductDao() {
        super(JProduct.PRODUCT, Product.class);
    }

    /**
     * Create a new ProductDao with an attached configuration
     */
    public ProductDao(Configuration configuration) {
        super(JProduct.PRODUCT, Product.class, configuration);
    }

    @Override
    public Integer getId(Product object) {
        return object.getProductId();
    }

    /**
     * Fetch records that have <code>PRODUCT_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Product> fetchRangeOfJProductId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JProduct.PRODUCT.PRODUCT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PRODUCT_ID IN (values)</code>
     */
    public List<Product> fetchByJProductId(Integer... values) {
        return fetch(JProduct.PRODUCT.PRODUCT_ID, values);
    }

    /**
     * Fetch a unique record that has <code>PRODUCT_ID = value</code>
     */
    public Product fetchOneByJProductId(Integer value) {
        return fetchOne(JProduct.PRODUCT.PRODUCT_ID, value);
    }

    /**
     * Fetch a unique record that has <code>PRODUCT_ID = value</code>
     */
    public Optional<Product> fetchOptionalByJProductId(Integer value) {
        return fetchOptional(JProduct.PRODUCT.PRODUCT_ID, value);
    }

    /**
     * Fetch records that have <code>GAME_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Product> fetchRangeOfJGameId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JProduct.PRODUCT.GAME_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>GAME_ID IN (values)</code>
     */
    public List<Product> fetchByJGameId(Integer... values) {
        return fetch(JProduct.PRODUCT.GAME_ID, values);
    }

    /**
     * Fetch records that have <code>PRODUCT_TYPE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Product> fetchRangeOfJProductType(String lowerInclusive, String upperInclusive) {
        return fetchRange(JProduct.PRODUCT.PRODUCT_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PRODUCT_TYPE IN (values)</code>
     */
    public List<Product> fetchByJProductType(String... values) {
        return fetch(JProduct.PRODUCT.PRODUCT_TYPE, values);
    }

    /**
     * Fetch records that have <code>PURCHASE_TYPE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Product> fetchRangeOfJPurchaseType(String lowerInclusive, String upperInclusive) {
        return fetchRange(JProduct.PRODUCT.PURCHASE_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PURCHASE_TYPE IN (values)</code>
     */
    public List<Product> fetchByJPurchaseType(String... values) {
        return fetch(JProduct.PRODUCT.PURCHASE_TYPE, values);
    }

    /**
     * Fetch records that have <code>CURRENCY_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Product> fetchRangeOfJCurrencyId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JProduct.PRODUCT.CURRENCY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CURRENCY_ID IN (values)</code>
     */
    public List<Product> fetchByJCurrencyId(Integer... values) {
        return fetch(JProduct.PRODUCT.CURRENCY_ID, values);
    }

    /**
     * Fetch records that have <code>NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Product> fetchRangeOfJName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JProduct.PRODUCT.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<Product> fetchByJName(String... values) {
        return fetch(JProduct.PRODUCT.NAME, values);
    }

    /**
     * Fetch records that have <code>DESC BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Product> fetchRangeOfJDesc(String lowerInclusive, String upperInclusive) {
        return fetchRange(JProduct.PRODUCT.DESC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DESC IN (values)</code>
     */
    public List<Product> fetchByJDesc(String... values) {
        return fetch(JProduct.PRODUCT.DESC, values);
    }

    /**
     * Fetch records that have <code>PRICE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Product> fetchRangeOfJPrice(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(JProduct.PRODUCT.PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PRICE IN (values)</code>
     */
    public List<Product> fetchByJPrice(BigDecimal... values) {
        return fetch(JProduct.PRODUCT.PRICE, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Product> fetchRangeOfJCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JProduct.PRODUCT.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<Product> fetchByJCreatedAt(OffsetDateTime... values) {
        return fetch(JProduct.PRODUCT.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Product> fetchRangeOfJUpdatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JProduct.PRODUCT.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<Product> fetchByJUpdatedAt(OffsetDateTime... values) {
        return fetch(JProduct.PRODUCT.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Product> fetchRangeOfJCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JProduct.PRODUCT.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<Product> fetchByJCreatedBy(String... values) {
        return fetch(JProduct.PRODUCT.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Product> fetchRangeOfJUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JProduct.PRODUCT.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<Product> fetchByJUpdatedBy(String... values) {
        return fetch(JProduct.PRODUCT.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>IS_DEL BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Product> fetchRangeOfJIsDel(String lowerInclusive, String upperInclusive) {
        return fetchRange(JProduct.PRODUCT.IS_DEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>IS_DEL IN (values)</code>
     */
    public List<Product> fetchByJIsDel(String... values) {
        return fetch(JProduct.PRODUCT.IS_DEL, values);
    }
}
