/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JTableColumn;
import org.jooq.generated.tables.pojos.TableColumn;
import org.jooq.generated.tables.records.TableColumnRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TableColumnDao extends DAOImpl<TableColumnRecord, TableColumn, Integer> {

    /**
     * Create a new TableColumnDao without any configuration
     */
    public TableColumnDao() {
        super(JTableColumn.TABLE_COLUMN, TableColumn.class);
    }

    /**
     * Create a new TableColumnDao with an attached configuration
     */
    public TableColumnDao(Configuration configuration) {
        super(JTableColumn.TABLE_COLUMN, TableColumn.class, configuration);
    }

    @Override
    public Integer getId(TableColumn object) {
        return object.getColumnId();
    }

    /**
     * Fetch records that have <code>COLUMN_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TableColumn> fetchRangeOfJColumnId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JTableColumn.TABLE_COLUMN.COLUMN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>COLUMN_ID IN (values)</code>
     */
    public List<TableColumn> fetchByJColumnId(Integer... values) {
        return fetch(JTableColumn.TABLE_COLUMN.COLUMN_ID, values);
    }

    /**
     * Fetch a unique record that has <code>COLUMN_ID = value</code>
     */
    public TableColumn fetchOneByJColumnId(Integer value) {
        return fetchOne(JTableColumn.TABLE_COLUMN.COLUMN_ID, value);
    }

    /**
     * Fetch a unique record that has <code>COLUMN_ID = value</code>
     */
    public Optional<TableColumn> fetchOptionalByJColumnId(Integer value) {
        return fetchOptional(JTableColumn.TABLE_COLUMN.COLUMN_ID, value);
    }

    /**
     * Fetch records that have <code>TABLE_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TableColumn> fetchRangeOfJTableId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JTableColumn.TABLE_COLUMN.TABLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>TABLE_ID IN (values)</code>
     */
    public List<TableColumn> fetchByJTableId(Integer... values) {
        return fetch(JTableColumn.TABLE_COLUMN.TABLE_ID, values);
    }

    /**
     * Fetch records that have <code>COLUMN_NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TableColumn> fetchRangeOfJColumnName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JTableColumn.TABLE_COLUMN.COLUMN_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>COLUMN_NAME IN (values)</code>
     */
    public List<TableColumn> fetchByJColumnName(String... values) {
        return fetch(JTableColumn.TABLE_COLUMN.COLUMN_NAME, values);
    }

    /**
     * Fetch records that have <code>COLUMN_DESC BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TableColumn> fetchRangeOfJColumnDesc(String lowerInclusive, String upperInclusive) {
        return fetchRange(JTableColumn.TABLE_COLUMN.COLUMN_DESC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>COLUMN_DESC IN (values)</code>
     */
    public List<TableColumn> fetchByJColumnDesc(String... values) {
        return fetch(JTableColumn.TABLE_COLUMN.COLUMN_DESC, values);
    }

    /**
     * Fetch records that have <code>COLUMN_TYPE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TableColumn> fetchRangeOfJColumnType(String lowerInclusive, String upperInclusive) {
        return fetchRange(JTableColumn.TABLE_COLUMN.COLUMN_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>COLUMN_TYPE IN (values)</code>
     */
    public List<TableColumn> fetchByJColumnType(String... values) {
        return fetch(JTableColumn.TABLE_COLUMN.COLUMN_TYPE, values);
    }

    /**
     * Fetch records that have <code>DEFAULT_VALUE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TableColumn> fetchRangeOfJDefaultValue(String lowerInclusive, String upperInclusive) {
        return fetchRange(JTableColumn.TABLE_COLUMN.DEFAULT_VALUE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DEFAULT_VALUE IN (values)</code>
     */
    public List<TableColumn> fetchByJDefaultValue(String... values) {
        return fetch(JTableColumn.TABLE_COLUMN.DEFAULT_VALUE, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TableColumn> fetchRangeOfJCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JTableColumn.TABLE_COLUMN.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<TableColumn> fetchByJCreatedAt(OffsetDateTime... values) {
        return fetch(JTableColumn.TABLE_COLUMN.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TableColumn> fetchRangeOfJCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JTableColumn.TABLE_COLUMN.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<TableColumn> fetchByJCreatedBy(String... values) {
        return fetch(JTableColumn.TABLE_COLUMN.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TableColumn> fetchRangeOfJUpdatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JTableColumn.TABLE_COLUMN.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<TableColumn> fetchByJUpdatedAt(OffsetDateTime... values) {
        return fetch(JTableColumn.TABLE_COLUMN.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TableColumn> fetchRangeOfJUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JTableColumn.TABLE_COLUMN.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<TableColumn> fetchByJUpdatedBy(String... values) {
        return fetch(JTableColumn.TABLE_COLUMN.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>IS_DEL BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TableColumn> fetchRangeOfJIsDel(String lowerInclusive, String upperInclusive) {
        return fetchRange(JTableColumn.TABLE_COLUMN.IS_DEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>IS_DEL IN (values)</code>
     */
    public List<TableColumn> fetchByJIsDel(String... values) {
        return fetch(JTableColumn.TABLE_COLUMN.IS_DEL, values);
    }
}
