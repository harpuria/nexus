/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JUserColumnData;
import org.jooq.generated.tables.pojos.UserColumnData;
import org.jooq.generated.tables.records.UserColumnDataRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserColumnDataDao extends DAOImpl<UserColumnDataRecord, UserColumnData, Integer> {

    /**
     * Create a new UserColumnDataDao without any configuration
     */
    public UserColumnDataDao() {
        super(JUserColumnData.USER_COLUMN_DATA, UserColumnData.class);
    }

    /**
     * Create a new UserColumnDataDao with an attached configuration
     */
    public UserColumnDataDao(Configuration configuration) {
        super(JUserColumnData.USER_COLUMN_DATA, UserColumnData.class, configuration);
    }

    @Override
    public Integer getId(UserColumnData object) {
        return object.getUserColumnId();
    }

    /**
     * Fetch records that have <code>USER_COLUMN_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserColumnData> fetchRangeOfJUserColumnId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUserColumnData.USER_COLUMN_DATA.USER_COLUMN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>USER_COLUMN_ID IN (values)</code>
     */
    public List<UserColumnData> fetchByJUserColumnId(Integer... values) {
        return fetch(JUserColumnData.USER_COLUMN_DATA.USER_COLUMN_ID, values);
    }

    /**
     * Fetch a unique record that has <code>USER_COLUMN_ID = value</code>
     */
    public UserColumnData fetchOneByJUserColumnId(Integer value) {
        return fetchOne(JUserColumnData.USER_COLUMN_DATA.USER_COLUMN_ID, value);
    }

    /**
     * Fetch a unique record that has <code>USER_COLUMN_ID = value</code>
     */
    public Optional<UserColumnData> fetchOptionalByJUserColumnId(Integer value) {
        return fetchOptional(JUserColumnData.USER_COLUMN_DATA.USER_COLUMN_ID, value);
    }

    /**
     * Fetch records that have <code>USER_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserColumnData> fetchRangeOfJUserId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUserColumnData.USER_COLUMN_DATA.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>USER_ID IN (values)</code>
     */
    public List<UserColumnData> fetchByJUserId(Integer... values) {
        return fetch(JUserColumnData.USER_COLUMN_DATA.USER_ID, values);
    }

    /**
     * Fetch records that have <code>TABLE_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserColumnData> fetchRangeOfJTableId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUserColumnData.USER_COLUMN_DATA.TABLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>TABLE_ID IN (values)</code>
     */
    public List<UserColumnData> fetchByJTableId(Integer... values) {
        return fetch(JUserColumnData.USER_COLUMN_DATA.TABLE_ID, values);
    }

    /**
     * Fetch records that have <code>COLUMN_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserColumnData> fetchRangeOfJColumnId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUserColumnData.USER_COLUMN_DATA.COLUMN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>COLUMN_ID IN (values)</code>
     */
    public List<UserColumnData> fetchByJColumnId(Integer... values) {
        return fetch(JUserColumnData.USER_COLUMN_DATA.COLUMN_ID, values);
    }

    /**
     * Fetch records that have <code>RECORD_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserColumnData> fetchRangeOfJRecordId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUserColumnData.USER_COLUMN_DATA.RECORD_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>RECORD_ID IN (values)</code>
     */
    public List<UserColumnData> fetchByJRecordId(Integer... values) {
        return fetch(JUserColumnData.USER_COLUMN_DATA.RECORD_ID, values);
    }

    /**
     * Fetch records that have <code>VALUE_STRING BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserColumnData> fetchRangeOfJValueString(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUserColumnData.USER_COLUMN_DATA.VALUE_STRING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>VALUE_STRING IN (values)</code>
     */
    public List<UserColumnData> fetchByJValueString(String... values) {
        return fetch(JUserColumnData.USER_COLUMN_DATA.VALUE_STRING, values);
    }

    /**
     * Fetch records that have <code>VALUE_NUMBER BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserColumnData> fetchRangeOfJValueNumber(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JUserColumnData.USER_COLUMN_DATA.VALUE_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>VALUE_NUMBER IN (values)</code>
     */
    public List<UserColumnData> fetchByJValueNumber(Long... values) {
        return fetch(JUserColumnData.USER_COLUMN_DATA.VALUE_NUMBER, values);
    }

    /**
     * Fetch records that have <code>VALUE_DATE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserColumnData> fetchRangeOfJValueDate(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JUserColumnData.USER_COLUMN_DATA.VALUE_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>VALUE_DATE IN (values)</code>
     */
    public List<UserColumnData> fetchByJValueDate(OffsetDateTime... values) {
        return fetch(JUserColumnData.USER_COLUMN_DATA.VALUE_DATE, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserColumnData> fetchRangeOfJCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JUserColumnData.USER_COLUMN_DATA.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<UserColumnData> fetchByJCreatedAt(OffsetDateTime... values) {
        return fetch(JUserColumnData.USER_COLUMN_DATA.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserColumnData> fetchRangeOfJCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUserColumnData.USER_COLUMN_DATA.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<UserColumnData> fetchByJCreatedBy(String... values) {
        return fetch(JUserColumnData.USER_COLUMN_DATA.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserColumnData> fetchRangeOfJUpdatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JUserColumnData.USER_COLUMN_DATA.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<UserColumnData> fetchByJUpdatedAt(OffsetDateTime... values) {
        return fetch(JUserColumnData.USER_COLUMN_DATA.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserColumnData> fetchRangeOfJUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUserColumnData.USER_COLUMN_DATA.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<UserColumnData> fetchByJUpdatedBy(String... values) {
        return fetch(JUserColumnData.USER_COLUMN_DATA.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>IS_DEL BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserColumnData> fetchRangeOfJIsDel(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUserColumnData.USER_COLUMN_DATA.IS_DEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>IS_DEL IN (values)</code>
     */
    public List<UserColumnData> fetchByJIsDel(String... values) {
        return fetch(JUserColumnData.USER_COLUMN_DATA.IS_DEL, values);
    }
}
