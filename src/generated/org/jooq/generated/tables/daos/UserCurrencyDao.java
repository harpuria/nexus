/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JUserCurrency;
import org.jooq.generated.tables.pojos.UserCurrency;
import org.jooq.generated.tables.records.UserCurrencyRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserCurrencyDao extends DAOImpl<UserCurrencyRecord, UserCurrency, Integer> {

    /**
     * Create a new UserCurrencyDao without any configuration
     */
    public UserCurrencyDao() {
        super(JUserCurrency.USER_CURRENCY, UserCurrency.class);
    }

    /**
     * Create a new UserCurrencyDao with an attached configuration
     */
    public UserCurrencyDao(Configuration configuration) {
        super(JUserCurrency.USER_CURRENCY, UserCurrency.class, configuration);
    }

    @Override
    public Integer getId(UserCurrency object) {
        return object.getUserCurrencyId();
    }

    /**
     * Fetch records that have <code>USER_CURRENCY_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserCurrency> fetchRangeOfJUserCurrencyId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUserCurrency.USER_CURRENCY.USER_CURRENCY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>USER_CURRENCY_ID IN (values)</code>
     */
    public List<UserCurrency> fetchByJUserCurrencyId(Integer... values) {
        return fetch(JUserCurrency.USER_CURRENCY.USER_CURRENCY_ID, values);
    }

    /**
     * Fetch a unique record that has <code>USER_CURRENCY_ID = value</code>
     */
    public UserCurrency fetchOneByJUserCurrencyId(Integer value) {
        return fetchOne(JUserCurrency.USER_CURRENCY.USER_CURRENCY_ID, value);
    }

    /**
     * Fetch a unique record that has <code>USER_CURRENCY_ID = value</code>
     */
    public Optional<UserCurrency> fetchOptionalByJUserCurrencyId(Integer value) {
        return fetchOptional(JUserCurrency.USER_CURRENCY.USER_CURRENCY_ID, value);
    }

    /**
     * Fetch records that have <code>CURRENCY_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserCurrency> fetchRangeOfJCurrencyId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUserCurrency.USER_CURRENCY.CURRENCY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CURRENCY_ID IN (values)</code>
     */
    public List<UserCurrency> fetchByJCurrencyId(Integer... values) {
        return fetch(JUserCurrency.USER_CURRENCY.CURRENCY_ID, values);
    }

    /**
     * Fetch records that have <code>USER_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserCurrency> fetchRangeOfJUserId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUserCurrency.USER_CURRENCY.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>USER_ID IN (values)</code>
     */
    public List<UserCurrency> fetchByJUserId(Integer... values) {
        return fetch(JUserCurrency.USER_CURRENCY.USER_ID, values);
    }

    /**
     * Fetch records that have <code>AMOUNT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserCurrency> fetchRangeOfJAmount(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JUserCurrency.USER_CURRENCY.AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>AMOUNT IN (values)</code>
     */
    public List<UserCurrency> fetchByJAmount(Long... values) {
        return fetch(JUserCurrency.USER_CURRENCY.AMOUNT, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserCurrency> fetchRangeOfJCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JUserCurrency.USER_CURRENCY.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<UserCurrency> fetchByJCreatedAt(OffsetDateTime... values) {
        return fetch(JUserCurrency.USER_CURRENCY.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserCurrency> fetchRangeOfJCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUserCurrency.USER_CURRENCY.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<UserCurrency> fetchByJCreatedBy(String... values) {
        return fetch(JUserCurrency.USER_CURRENCY.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserCurrency> fetchRangeOfJUpdatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JUserCurrency.USER_CURRENCY.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<UserCurrency> fetchByJUpdatedAt(OffsetDateTime... values) {
        return fetch(JUserCurrency.USER_CURRENCY.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserCurrency> fetchRangeOfJUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUserCurrency.USER_CURRENCY.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<UserCurrency> fetchByJUpdatedBy(String... values) {
        return fetch(JUserCurrency.USER_CURRENCY.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>IS_DEL BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserCurrency> fetchRangeOfJIsDel(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUserCurrency.USER_CURRENCY.IS_DEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>IS_DEL IN (values)</code>
     */
    public List<UserCurrency> fetchByJIsDel(String... values) {
        return fetch(JUserCurrency.USER_CURRENCY.IS_DEL, values);
    }
}
