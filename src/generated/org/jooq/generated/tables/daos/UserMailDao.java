/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JUserMail;
import org.jooq.generated.tables.pojos.UserMail;
import org.jooq.generated.tables.records.UserMailRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserMailDao extends DAOImpl<UserMailRecord, UserMail, Integer> {

    /**
     * Create a new UserMailDao without any configuration
     */
    public UserMailDao() {
        super(JUserMail.USER_MAIL, UserMail.class);
    }

    /**
     * Create a new UserMailDao with an attached configuration
     */
    public UserMailDao(Configuration configuration) {
        super(JUserMail.USER_MAIL, UserMail.class, configuration);
    }

    @Override
    public Integer getId(UserMail object) {
        return object.getUserMailId();
    }

    /**
     * Fetch records that have <code>USER_MAIL_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserMail> fetchRangeOfJUserMailId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUserMail.USER_MAIL.USER_MAIL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>USER_MAIL_ID IN (values)</code>
     */
    public List<UserMail> fetchByJUserMailId(Integer... values) {
        return fetch(JUserMail.USER_MAIL.USER_MAIL_ID, values);
    }

    /**
     * Fetch a unique record that has <code>USER_MAIL_ID = value</code>
     */
    public UserMail fetchOneByJUserMailId(Integer value) {
        return fetchOne(JUserMail.USER_MAIL.USER_MAIL_ID, value);
    }

    /**
     * Fetch a unique record that has <code>USER_MAIL_ID = value</code>
     */
    public Optional<UserMail> fetchOptionalByJUserMailId(Integer value) {
        return fetchOptional(JUserMail.USER_MAIL.USER_MAIL_ID, value);
    }

    /**
     * Fetch records that have <code>MAIL_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserMail> fetchRangeOfJMailId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUserMail.USER_MAIL.MAIL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>MAIL_ID IN (values)</code>
     */
    public List<UserMail> fetchByJMailId(Integer... values) {
        return fetch(JUserMail.USER_MAIL.MAIL_ID, values);
    }

    /**
     * Fetch records that have <code>USER_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserMail> fetchRangeOfJUserId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JUserMail.USER_MAIL.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>USER_ID IN (values)</code>
     */
    public List<UserMail> fetchByJUserId(Integer... values) {
        return fetch(JUserMail.USER_MAIL.USER_ID, values);
    }

    /**
     * Fetch records that have <code>IS_READ BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserMail> fetchRangeOfJIsRead(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUserMail.USER_MAIL.IS_READ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>IS_READ IN (values)</code>
     */
    public List<UserMail> fetchByJIsRead(String... values) {
        return fetch(JUserMail.USER_MAIL.IS_READ, values);
    }

    /**
     * Fetch records that have <code>IS_RECEIVED BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserMail> fetchRangeOfJIsReceived(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUserMail.USER_MAIL.IS_RECEIVED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>IS_RECEIVED IN (values)</code>
     */
    public List<UserMail> fetchByJIsReceived(String... values) {
        return fetch(JUserMail.USER_MAIL.IS_RECEIVED, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserMail> fetchRangeOfJCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JUserMail.USER_MAIL.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<UserMail> fetchByJCreatedAt(OffsetDateTime... values) {
        return fetch(JUserMail.USER_MAIL.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserMail> fetchRangeOfJCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUserMail.USER_MAIL.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<UserMail> fetchByJCreatedBy(String... values) {
        return fetch(JUserMail.USER_MAIL.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserMail> fetchRangeOfJUpdatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(JUserMail.USER_MAIL.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<UserMail> fetchByJUpdatedAt(OffsetDateTime... values) {
        return fetch(JUserMail.USER_MAIL.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserMail> fetchRangeOfJUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUserMail.USER_MAIL.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<UserMail> fetchByJUpdatedBy(String... values) {
        return fetch(JUserMail.USER_MAIL.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>IS_DEL BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserMail> fetchRangeOfJIsDel(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUserMail.USER_MAIL.IS_DEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>IS_DEL IN (values)</code>
     */
    public List<UserMail> fetchByJIsDel(String... values) {
        return fetch(JUserMail.USER_MAIL.IS_DEL, values);
    }
}
