/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;
import java.time.OffsetDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserColumnData implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer userColumnId;
    private Integer userId;
    private Integer tableId;
    private Integer columnId;
    private Integer recordId;
    private String valueString;
    private Long valueNumber;
    private OffsetDateTime valueDate;
    private OffsetDateTime createdAt;
    private String createdBy;
    private OffsetDateTime updatedAt;
    private String updatedBy;
    private String isDel;

    public UserColumnData() {}

    public UserColumnData(UserColumnData value) {
        this.userColumnId = value.userColumnId;
        this.userId = value.userId;
        this.tableId = value.tableId;
        this.columnId = value.columnId;
        this.recordId = value.recordId;
        this.valueString = value.valueString;
        this.valueNumber = value.valueNumber;
        this.valueDate = value.valueDate;
        this.createdAt = value.createdAt;
        this.createdBy = value.createdBy;
        this.updatedAt = value.updatedAt;
        this.updatedBy = value.updatedBy;
        this.isDel = value.isDel;
    }

    public UserColumnData(
        Integer userColumnId,
        Integer userId,
        Integer tableId,
        Integer columnId,
        Integer recordId,
        String valueString,
        Long valueNumber,
        OffsetDateTime valueDate,
        OffsetDateTime createdAt,
        String createdBy,
        OffsetDateTime updatedAt,
        String updatedBy,
        String isDel
    ) {
        this.userColumnId = userColumnId;
        this.userId = userId;
        this.tableId = tableId;
        this.columnId = columnId;
        this.recordId = recordId;
        this.valueString = valueString;
        this.valueNumber = valueNumber;
        this.valueDate = valueDate;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
        this.isDel = isDel;
    }

    /**
     * Getter for <code>nexus.USER_COLUMN_DATA.USER_COLUMN_ID</code>.
     * USER_COLUNM_DATA 테이블 기본키 (PK)
     */
    public Integer getUserColumnId() {
        return this.userColumnId;
    }

    /**
     * Setter for <code>nexus.USER_COLUMN_DATA.USER_COLUMN_ID</code>.
     * USER_COLUNM_DATA 테이블 기본키 (PK)
     */
    public UserColumnData setUserColumnId(Integer userColumnId) {
        this.userColumnId = userColumnId;
        return this;
    }

    /**
     * Getter for <code>nexus.USER_COLUMN_DATA.USER_ID</code>. GAME_USER 기본키
     * (PK)
     */
    public Integer getUserId() {
        return this.userId;
    }

    /**
     * Setter for <code>nexus.USER_COLUMN_DATA.USER_ID</code>. GAME_USER 기본키
     * (PK)
     */
    public UserColumnData setUserId(Integer userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Getter for <code>nexus.USER_COLUMN_DATA.TABLE_ID</code>. GAME_TABLE 기본키
     * (PK)
     */
    public Integer getTableId() {
        return this.tableId;
    }

    /**
     * Setter for <code>nexus.USER_COLUMN_DATA.TABLE_ID</code>. GAME_TABLE 기본키
     * (PK)
     */
    public UserColumnData setTableId(Integer tableId) {
        this.tableId = tableId;
        return this;
    }

    /**
     * Getter for <code>nexus.USER_COLUMN_DATA.COLUMN_ID</code>. TABLE_COLUMN
     * 기본키 (PK)
     */
    public Integer getColumnId() {
        return this.columnId;
    }

    /**
     * Setter for <code>nexus.USER_COLUMN_DATA.COLUMN_ID</code>. TABLE_COLUMN
     * 기본키 (PK)
     */
    public UserColumnData setColumnId(Integer columnId) {
        this.columnId = columnId;
        return this;
    }

    /**
     * Getter for <code>nexus.USER_COLUMN_DATA.RECORD_ID</code>. 해당 테이블에 여러 행을
     * 넣기 위한 구분자
     */
    public Integer getRecordId() {
        return this.recordId;
    }

    /**
     * Setter for <code>nexus.USER_COLUMN_DATA.RECORD_ID</code>. 해당 테이블에 여러 행을
     * 넣기 위한 구분자
     */
    public UserColumnData setRecordId(Integer recordId) {
        this.recordId = recordId;
        return this;
    }

    /**
     * Getter for <code>nexus.USER_COLUMN_DATA.VALUE_STRING</code>. STRING 타입 값
     */
    public String getValueString() {
        return this.valueString;
    }

    /**
     * Setter for <code>nexus.USER_COLUMN_DATA.VALUE_STRING</code>. STRING 타입 값
     */
    public UserColumnData setValueString(String valueString) {
        this.valueString = valueString;
        return this;
    }

    /**
     * Getter for <code>nexus.USER_COLUMN_DATA.VALUE_NUMBER</code>. NUMBER 타입 값
     */
    public Long getValueNumber() {
        return this.valueNumber;
    }

    /**
     * Setter for <code>nexus.USER_COLUMN_DATA.VALUE_NUMBER</code>. NUMBER 타입 값
     */
    public UserColumnData setValueNumber(Long valueNumber) {
        this.valueNumber = valueNumber;
        return this;
    }

    /**
     * Getter for <code>nexus.USER_COLUMN_DATA.VALUE_DATE</code>. DATE 타입 값
     */
    public OffsetDateTime getValueDate() {
        return this.valueDate;
    }

    /**
     * Setter for <code>nexus.USER_COLUMN_DATA.VALUE_DATE</code>. DATE 타입 값
     */
    public UserColumnData setValueDate(OffsetDateTime valueDate) {
        this.valueDate = valueDate;
        return this;
    }

    /**
     * Getter for <code>nexus.USER_COLUMN_DATA.CREATED_AT</code>. 데이터 생성 날짜
     */
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>nexus.USER_COLUMN_DATA.CREATED_AT</code>. 데이터 생성 날짜
     */
    public UserColumnData setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>nexus.USER_COLUMN_DATA.CREATED_BY</code>. 데이터 생성자 ID
     */
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>nexus.USER_COLUMN_DATA.CREATED_BY</code>. 데이터 생성자 ID
     */
    public UserColumnData setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>nexus.USER_COLUMN_DATA.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>nexus.USER_COLUMN_DATA.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public UserColumnData setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>nexus.USER_COLUMN_DATA.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>nexus.USER_COLUMN_DATA.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public UserColumnData setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * Getter for <code>nexus.USER_COLUMN_DATA.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public String getIsDel() {
        return this.isDel;
    }

    /**
     * Setter for <code>nexus.USER_COLUMN_DATA.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public UserColumnData setIsDel(String isDel) {
        this.isDel = isDel;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final UserColumnData other = (UserColumnData) obj;
        if (this.userColumnId == null) {
            if (other.userColumnId != null)
                return false;
        }
        else if (!this.userColumnId.equals(other.userColumnId))
            return false;
        if (this.userId == null) {
            if (other.userId != null)
                return false;
        }
        else if (!this.userId.equals(other.userId))
            return false;
        if (this.tableId == null) {
            if (other.tableId != null)
                return false;
        }
        else if (!this.tableId.equals(other.tableId))
            return false;
        if (this.columnId == null) {
            if (other.columnId != null)
                return false;
        }
        else if (!this.columnId.equals(other.columnId))
            return false;
        if (this.recordId == null) {
            if (other.recordId != null)
                return false;
        }
        else if (!this.recordId.equals(other.recordId))
            return false;
        if (this.valueString == null) {
            if (other.valueString != null)
                return false;
        }
        else if (!this.valueString.equals(other.valueString))
            return false;
        if (this.valueNumber == null) {
            if (other.valueNumber != null)
                return false;
        }
        else if (!this.valueNumber.equals(other.valueNumber))
            return false;
        if (this.valueDate == null) {
            if (other.valueDate != null)
                return false;
        }
        else if (!this.valueDate.equals(other.valueDate))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        if (this.isDel == null) {
            if (other.isDel != null)
                return false;
        }
        else if (!this.isDel.equals(other.isDel))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.userColumnId == null) ? 0 : this.userColumnId.hashCode());
        result = prime * result + ((this.userId == null) ? 0 : this.userId.hashCode());
        result = prime * result + ((this.tableId == null) ? 0 : this.tableId.hashCode());
        result = prime * result + ((this.columnId == null) ? 0 : this.columnId.hashCode());
        result = prime * result + ((this.recordId == null) ? 0 : this.recordId.hashCode());
        result = prime * result + ((this.valueString == null) ? 0 : this.valueString.hashCode());
        result = prime * result + ((this.valueNumber == null) ? 0 : this.valueNumber.hashCode());
        result = prime * result + ((this.valueDate == null) ? 0 : this.valueDate.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        result = prime * result + ((this.isDel == null) ? 0 : this.isDel.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UserColumnData (");

        sb.append(userColumnId);
        sb.append(", ").append(userId);
        sb.append(", ").append(tableId);
        sb.append(", ").append(columnId);
        sb.append(", ").append(recordId);
        sb.append(", ").append(valueString);
        sb.append(", ").append(valueNumber);
        sb.append(", ").append(valueDate);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);
        sb.append(", ").append(isDel);

        sb.append(")");
        return sb.toString();
    }
}
