/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import java.time.OffsetDateTime;

import org.jooq.Record1;
import org.jooq.generated.tables.JGameUser;
import org.jooq.generated.tables.pojos.GameUser;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GameUserRecord extends UpdatableRecordImpl<GameUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>nexus.GAME_USER.USER_ID</code>. GAME_USER 테이블 기본키(PK)
     */
    public GameUserRecord setUserId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.USER_ID</code>. GAME_USER 테이블 기본키(PK)
     */
    public Integer getUserId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>nexus.GAME_USER.GAME_ID</code>. 해당 유저가 속한 게임 ID (FK)
     */
    public GameUserRecord setGameId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.GAME_ID</code>. 해당 유저가 속한 게임 ID (FK)
     */
    public Integer getGameId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>nexus.GAME_USER.USER_L_ID</code>. 유저 로그인 아이디 (소셜 로그인의 경우
     * 소셜 로그인할 당시의 이메일 주소)
     */
    public GameUserRecord setUserLId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.USER_L_ID</code>. 유저 로그인 아이디 (소셜 로그인의 경우
     * 소셜 로그인할 당시의 이메일 주소)
     */
    public String getUserLId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>nexus.GAME_USER.USER_L_PW</code>. 유저 로그인 패스워드 (소셜 로그인인
     * 경우 없을 수도 있음)
     */
    public GameUserRecord setUserLPw(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.USER_L_PW</code>. 유저 로그인 패스워드 (소셜 로그인인
     * 경우 없을 수도 있음)
     */
    public String getUserLPw() {
        return (String) get(3);
    }

    /**
     * Setter for <code>nexus.GAME_USER.PROVIDER</code>. 소셜 로그인 타입
     */
    public GameUserRecord setProvider(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.PROVIDER</code>. 소셜 로그인 타입
     */
    public String getProvider() {
        return (String) get(4);
    }

    /**
     * Setter for <code>nexus.GAME_USER.SOCIAL_ID</code>. 소셜 로그인 아이디
     */
    public GameUserRecord setSocialId(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.SOCIAL_ID</code>. 소셜 로그인 아이디
     */
    public String getSocialId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>nexus.GAME_USER.NICKNAME</code>. 게임에서 사용되는 닉네임
     */
    public GameUserRecord setNickname(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.NICKNAME</code>. 게임에서 사용되는 닉네임
     */
    public String getNickname() {
        return (String) get(6);
    }

    /**
     * Setter for <code>nexus.GAME_USER.DEVICE</code>. 접속 기기
     */
    public GameUserRecord setDevice(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.DEVICE</code>. 접속 기기
     */
    public String getDevice() {
        return (String) get(7);
    }

    /**
     * Setter for <code>nexus.GAME_USER.BLOCK_START_DATE</code>. 계정 정지 시작일
     */
    public GameUserRecord setBlockStartDate(OffsetDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.BLOCK_START_DATE</code>. 계정 정지 시작일
     */
    public OffsetDateTime getBlockStartDate() {
        return (OffsetDateTime) get(8);
    }

    /**
     * Setter for <code>nexus.GAME_USER.BLOCK_END_DATE</code>. 계정 정지 종료일
     */
    public GameUserRecord setBlockEndDate(OffsetDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.BLOCK_END_DATE</code>. 계정 정지 종료일
     */
    public OffsetDateTime getBlockEndDate() {
        return (OffsetDateTime) get(9);
    }

    /**
     * Setter for <code>nexus.GAME_USER.BLOCK_REASON</code>. 계정 정지 사유
     */
    public GameUserRecord setBlockReason(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.BLOCK_REASON</code>. 계정 정지 사유
     */
    public String getBlockReason() {
        return (String) get(10);
    }

    /**
     * Setter for <code>nexus.GAME_USER.IS_WITHDRAWAL</code>. 회원탈퇴여부
     */
    public GameUserRecord setIsWithdrawal(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.IS_WITHDRAWAL</code>. 회원탈퇴여부
     */
    public String getIsWithdrawal() {
        return (String) get(11);
    }

    /**
     * Setter for <code>nexus.GAME_USER.WITHDRAWAL_DATE</code>. 게임탈퇴날짜
     */
    public GameUserRecord setWithdrawalDate(OffsetDateTime value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.WITHDRAWAL_DATE</code>. 게임탈퇴날짜
     */
    public OffsetDateTime getWithdrawalDate() {
        return (OffsetDateTime) get(12);
    }

    /**
     * Setter for <code>nexus.GAME_USER.WITHDRAWAL_REASON</code>. 게임탈퇴사유
     */
    public GameUserRecord setWithdrawalReason(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.WITHDRAWAL_REASON</code>. 게임탈퇴사유
     */
    public String getWithdrawalReason() {
        return (String) get(13);
    }

    /**
     * Setter for <code>nexus.GAME_USER.CREATED_AT</code>. 데이터 생성 날짜
     */
    public GameUserRecord setCreatedAt(OffsetDateTime value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.CREATED_AT</code>. 데이터 생성 날짜
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(14);
    }

    /**
     * Setter for <code>nexus.GAME_USER.CREATED_BY</code>. 데이터 생성자 ID
     */
    public GameUserRecord setCreatedBy(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.CREATED_BY</code>. 데이터 생성자 ID
     */
    public String getCreatedBy() {
        return (String) get(15);
    }

    /**
     * Setter for <code>nexus.GAME_USER.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public GameUserRecord setUpdatedAt(OffsetDateTime value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.UPDATED_AT</code>. 데이터 수정 날짜
     */
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(16);
    }

    /**
     * Setter for <code>nexus.GAME_USER.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public GameUserRecord setUpdatedBy(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.UPDATED_BY</code>. 데이터 수정자 ID
     */
    public String getUpdatedBy() {
        return (String) get(17);
    }

    /**
     * Setter for <code>nexus.GAME_USER.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public GameUserRecord setIsDel(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>nexus.GAME_USER.IS_DEL</code>. 데이터 삭제 여부 (기본값 N)
     */
    public String getIsDel() {
        return (String) get(18);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GameUserRecord
     */
    public GameUserRecord() {
        super(JGameUser.GAME_USER);
    }

    /**
     * Create a detached, initialised GameUserRecord
     */
    public GameUserRecord(Integer userId, Integer gameId, String userLId, String userLPw, String provider, String socialId, String nickname, String device, OffsetDateTime blockStartDate, OffsetDateTime blockEndDate, String blockReason, String isWithdrawal, OffsetDateTime withdrawalDate, String withdrawalReason, OffsetDateTime createdAt, String createdBy, OffsetDateTime updatedAt, String updatedBy, String isDel) {
        super(JGameUser.GAME_USER);

        setUserId(userId);
        setGameId(gameId);
        setUserLId(userLId);
        setUserLPw(userLPw);
        setProvider(provider);
        setSocialId(socialId);
        setNickname(nickname);
        setDevice(device);
        setBlockStartDate(blockStartDate);
        setBlockEndDate(blockEndDate);
        setBlockReason(blockReason);
        setIsWithdrawal(isWithdrawal);
        setWithdrawalDate(withdrawalDate);
        setWithdrawalReason(withdrawalReason);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        setIsDel(isDel);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised GameUserRecord
     */
    public GameUserRecord(GameUser value) {
        super(JGameUser.GAME_USER);

        if (value != null) {
            setUserId(value.getUserId());
            setGameId(value.getGameId());
            setUserLId(value.getUserLId());
            setUserLPw(value.getUserLPw());
            setProvider(value.getProvider());
            setSocialId(value.getSocialId());
            setNickname(value.getNickname());
            setDevice(value.getDevice());
            setBlockStartDate(value.getBlockStartDate());
            setBlockEndDate(value.getBlockEndDate());
            setBlockReason(value.getBlockReason());
            setIsWithdrawal(value.getIsWithdrawal());
            setWithdrawalDate(value.getWithdrawalDate());
            setWithdrawalReason(value.getWithdrawalReason());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            setIsDel(value.getIsDel());
            resetChangedOnNotNull();
        }
    }
}
